#!/usr/bin/env python3
# pylint: disable=R0902, W1514
# disabling "Too many instance attributes," "using open without specifying and
# endcoding,"" which is a known bug in pylint.
# File: create_sample_data.py
# About: Create test e-Invoices using fake data sets.
# Development: Kelly Kinney
# Date: 2021-06-22 (June 22, 2021)
#
"""
Classes and functions to generate sample/test e-Invoices.

Test data is generated in two ways.
1. Read in from a file.
2. Additional dummy data is genearted on the fly by the Faker package.
Data generated by Faker is new every run. Data sets from the CSV files
are static.
Data items are combined into an e-Invoice line item and stored as a list.
The output of this sample list of line items is written to a JSON file.

    Usage:
    genLI = generateLineItems()
    genLI.

"""
import csv
import random
import logging
from json import dumps
from faker import Faker
from einvoice.discovery.app_logging import create_logger


class CreateSampleData:
    """An instance of the CreateSampleData object.

    The job of this class/object is to generate sample data for
    an e-Invoice.

    Args:

    Attributes:
        items[]: A list of line_items to populate an e-Invoice.  Populated by
            reading in from a CSV file.
        f.per_item[]: A list of item sizes/groups/types to
            populate an e-Invoice.
            Populated by reading in from a CSV file.
    """

    def __init__(self):
        """Entry point for the module.  Defines instance variables."""
        self.log = create_logger("create_sample_data")
        self.log.info("Generating e-Invoice Data!")
        self.fake = Faker()
        self.companies = []
        self.org_id = ""
        self.name = ""
        self.address_1 = ""
        self.address_2 = ""
        self.city = ""
        self.state = ""
        self.zip_code = ""
        self.company = ""
        self.reader = None
        self.items = []
        self.per_item = []
        self.line_items = []
        self.line_item_id = ""
        self.line_item_quantity = 0
        self.line_item_per_item = ""
        self.line_item_price_per_item = 0.0
        self.line_item_name = ""
        self.line_item_total = 0.0
        self.sample_line_item = ""

    def generate_fake_address(self, count=1):
        """Generate as many fake addresses as requested.

        Args:
            count:
                The number of addresses requested.

        Returns:
            A list of JSON entries with each one representing an
            address.
        """
        self.log = create_logger("create_sample_data")

        Faker.seed(0)

        # self.companies = []

        for _ in range(count):
            self.org_id = self.fake.bothify(text='????-######',
                                            letters='ACDEFGHIJKLMNOPQR'
                                            'SQSTeUVWXYZ')
            self.name = self.fake.company()
            self.address_1 = "Attn: " + self.fake.name()
            self.address_2 = self.fake.street_address()
            self.city = self.fake.city()
            self.state = self.fake.state()
            self.zip_code = self.fake.postcode()

            # Create a JSON string of the Company.
            self.company = str({"org_id": self.org_id, "name": self.name,
                                "address_1": self.address_1,
                                "address_2": self.address_2,
                                "city": self.city, "state": self.state,
                                "zip_code": self.zip_code})

            self.companies.append(self.company)

            self.log.debug("Created a data for company: %s", self.company)

        return self.companies

    def create_sample_list_items(self, count=1):
        """Generate as many fake line_items as requested.

        Args:
            _count:
                The number of line_items requested.

        Returns:
            A list of JSON entries with each one representing a line item.
        """
        self.log = create_logger("create_sample_data")
        with open('./item_list.csv', newline='') as csvfile:
            self.reader = csv.reader(csvfile)
            for row in self.reader:
                self.items.append(row)

        with open('./per_item_list.csv', newline='') as csvfile:
            self.reader = csv.reader(csvfile)
            for row in self.reader:
                self.per_item.append(row)

        for _ in range(count):
            self.line_item_id = self.fake.bothify(text='??????-###',
                                                  letters='ACDEFGHIJKLMN'
                                                  'OPQRSQSTeUVWXYZ')
            self.line_item_quantity = random.randint(1, 10)
            self.line_item_per_item = random.choice(self.per_item)
            self.line_item_price_per_item = (random.randint(100, 10000)) / 100
            self.line_item_name = random.choice(self.items)
            self.line_item_total = (
                self.line_item_quantity * self.line_item_price_per_item
            )

            # Create a JSON string of the sample_line_item
            self.sample_line_item = str({'Item ID': self.line_item_id,
                                         'Quantity': self.line_item_quantity,
                                         'Per Item': self.line_item_per_item,
                                         'Price per Item':
                                         self.line_item_price_per_item,
                                         'Item': self.line_item_name,
                                         'Total': self.line_item_total})

            self.line_items.append(self.sample_line_item)

            self.log.debug("Created line item entry: %s",
                           self.sample_line_item)

        return self.line_items

    def write_json_to_file(self, json_object):
        """Write data to a json file."""
        self.log = create_logger("create_sample_data")

        if len(json_object) < 1:
            self.log.debug("Risk of EOB with no objects to write.")
            return

        for i, obj in enumerate(json_object):
            json_str = dumps(obj.__dict__)
            logging.debug("List item %s: %s", str(i), json_str)
            print(json_str)
