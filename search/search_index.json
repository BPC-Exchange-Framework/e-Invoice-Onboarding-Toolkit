{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Home Welcome Welcome to the e-Invoice Onboarding Toolkit This is a repository for open source software tools created to facilitate market adoption of e-invoices implemented conformant with the Four-Corner interoperability model framework. Outcomes Hashing functionality to derive the urn for look-up in a DNS NAPTR record. DNS NATPR lookup and extract the relevant SMP URI. Two REST requests to an SMP server to retrieve a Corner 3 URI. Execute the REST requests to the SMP server. Extract the Corner 3 endpoint URI from the response from the SMP server. Validate an e-Invoice ebXML message header for compliance with an AS4 conformance profile. For information about e-invoices and implementing the Four-Corner Model please visit the Business Payments Coalition website . Additional documentation, reference materials, and standards can be found on the Oasis-Open.org website . Start with the ebXML specification This Project Project Home FAQ Outcomes Assumptions Tools and Resources Configure a Python Environment Package Requirements Getting the Code Using the Code Using the Modules Test Cases Start-to-Finish example JupyterLab/Notebooks Project Roadmap Project Artifacts Workflow Oasis Resources License No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Project Home"},{"location":"#project-home","text":"","title":"Project Home"},{"location":"#welcome","text":"Welcome to the e-Invoice Onboarding Toolkit This is a repository for open source software tools created to facilitate market adoption of e-invoices implemented conformant with the Four-Corner interoperability model framework. Outcomes Hashing functionality to derive the urn for look-up in a DNS NAPTR record. DNS NATPR lookup and extract the relevant SMP URI. Two REST requests to an SMP server to retrieve a Corner 3 URI. Execute the REST requests to the SMP server. Extract the Corner 3 endpoint URI from the response from the SMP server. Validate an e-Invoice ebXML message header for compliance with an AS4 conformance profile. For information about e-invoices and implementing the Four-Corner Model please visit the Business Payments Coalition website . Additional documentation, reference materials, and standards can be found on the Oasis-Open.org website . Start with the ebXML specification","title":"Welcome"},{"location":"#this-project","text":"Project Home FAQ Outcomes Assumptions Tools and Resources Configure a Python Environment Package Requirements Getting the Code Using the Code Using the Modules Test Cases Start-to-Finish example JupyterLab/Notebooks Project Roadmap Project Artifacts Workflow Oasis Resources License","title":"This Project"},{"location":"_license/","text":"MIT License Copyright (c) 2022 BPC Open Source Tools Project Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"_license/#mit-license","text":"Copyright (c) 2022 BPC Open Source Tools Project Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"accessor/","text":"e-invoice Onboarding Toolkit API accessor Module ::: ./discovery.accessor.Accessor <!-- handler: python selection: members: - __init__ - call_hash - call_dns_lookup - call_smp_service_group_url - call_smp_service_url rendering: show_root_heading: true show_source: true --> :docstring: :members: call_has call_dns_lookup call_smp_service_group_url call_smp_service_url","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"accessor/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"accessor/#accessor-module","text":"::: ./discovery.accessor.Accessor <!-- handler: python selection: members: - __init__ - call_hash - call_dns_lookup - call_smp_service_group_url - call_smp_service_url rendering: show_root_heading: true show_source: true --> :docstring: :members: call_has call_dns_lookup call_smp_service_group_url call_smp_service_url","title":"accessor Module"},{"location":"app_handler/","text":"e-invoice Onboarding Toolkit API app_logging Module ::: discovery/app_handler.create_logger :docstring: :members: create_logger","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"app_handler/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"app_handler/#app_logging-module","text":"::: discovery/app_handler.create_logger :docstring: :members: create_logger","title":"app_logging Module"},{"location":"app_logging/","text":"e-invoice Onboarding Toolkit API app_logging Module ::: discovery/app_logging.create_logger :docstring: :members: create_logger","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"app_logging/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"app_logging/#app_logging-module","text":"::: discovery/app_logging.create_logger :docstring: :members: create_logger","title":"app_logging Module"},{"location":"artifacts/","text":"The Repo(sitory) Repository Layout This project includes the following files, i.e., \"artifacts\" in .py , . md , . txt and other formats, updated as of: 02/07/2022 (February 7th, 2022) /e-Invoice-Onboarding-Toolkit . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u251c\u2500\u2500 einvoice \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 delivery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 import_xsd.py \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2514\u2500\u2500 tests \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 test_import_xsd.py \u2502 \u251c\u2500\u2500 discovery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 accessor.py \u2502 \u2502 \u251c\u2500\u2500 app_handler.py \u2502 \u2502 \u251c\u2500\u2500 app_logging.py \u2502 \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 config_tool.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 smp_config.py \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.py \u2502 \u2502 \u251c\u2500\u2500 data \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 item_list.csv \u2502 \u2502 \u2502 \u2514\u2500\u2500 per_item_list.csv \u2502 \u2502 \u251c\u2500\u2500 dns_query.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 ebms-header.xml \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.py \u2502 \u2502 \u251c\u2500\u2500 line_item.py \u2502 \u2502 \u251c\u2500\u2500 party_address.py \u2502 \u2502 \u251c\u2500\u2500 semantic_model.py \u2502 \u2502 \u251c\u2500\u2500 smp_query.py \u2502 \u2502 \u251c\u2500\u2500 tests \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ez_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 flake8_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 hardcore_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 magic_linter.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 mypy_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pycodestyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pydocstyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pylint_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_accessor.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_app_logging.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_tracking_id.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_dns_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_line_item.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_party_address.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_semantic_model.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_smp_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn_hasher.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 unaptr_response.json \u2502 \u2502 \u251c\u2500\u2500 urn.py \u2502 \u2502 \u2514\u2500\u2500 urn_hasher.py \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 _license.md \u2502 \u2502 \u251c\u2500\u2500 accessor.md \u2502 \u2502 \u251c\u2500\u2500 app_logging.md \u2502 \u2502 \u251c\u2500\u2500 artifacts.md \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.md \u2502 \u2502 \u251c\u2500\u2500 custom_theme \u2502 \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u2514\u2500\u2500 main.html \u2502 \u2502 \u251c\u2500\u2500 dns_query.md \u2502 \u2502 \u251c\u2500\u2500 drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.3.drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.drawio \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participant 1.1.drawio \u2502 \u2502 \u251c\u2500\u2500 einvoice_design.xlsx \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.md \u2502 \u2502 \u251c\u2500\u2500 enabling_infrastructure_components.md \u2502 \u2502 \u251c\u2500\u2500 faq.md \u2502 \u2502 \u251c\u2500\u2500 flask_integration_on_docker.md \u2502 \u2502 \u251c\u2500\u2500 getting_started.md \u2502 \u2502 \u251c\u2500\u2500 git_workflow.md \u2502 \u2502 \u251c\u2500\u2500 google_colab_pages.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u251c\u2500\u2500 jupyterlab \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4_v2.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 dns_query.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20210119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 naptr_lookup.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 python_dev.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2502 \u251c\u2500\u2500 tracking_id_sandbox.ipynb \u2502 \u2502 \u2502 \u2514\u2500\u2500 urn_hash_work.ipynb \u2502 \u2502 \u251c\u2500\u2500 line_item.md \u2502 \u2502 \u251c\u2500\u2500 oasis_documentation.md \u2502 \u2502 \u251c\u2500\u2500 party_address.md \u2502 \u2502 \u251c\u2500\u2500 pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.4.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.3.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Participant 1.1.pdf \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participants 1.2.pdf \u2502 \u2502 \u251c\u2500\u2500 project_roadmap.md \u2502 \u2502 \u251c\u2500\u2500 python_dev_env.md \u2502 \u2502 \u251c\u2500\u2500 requirements.md \u2502 \u2502 \u251c\u2500\u2500 semantic_model.md \u2502 \u2502 \u251c\u2500\u2500 smp_query.md \u2502 \u2502 \u251c\u2500\u2500 start_to_finish.md \u2502 \u2502 \u251c\u2500\u2500 test_cases.md \u2502 \u2502 \u251c\u2500\u2500 todo.md \u2502 \u2502 \u251c\u2500\u2500 tools_and_resources.md \u2502 \u2502 \u251c\u2500\u2500 urn.md \u2502 \u2502 \u251c\u2500\u2500 urn_handler.md \u2502 \u2502 \u251c\u2500\u2500 urn_hasher.md \u2502 \u2502 \u251c\u2500\u2500 using_the_modules.md \u2502 \u2502 \u2514\u2500\u2500 working_with_the_code.md \u2502 \u2514\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 todo.md 13 directories, 109 files No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Project Artifacts"},{"location":"artifacts/#the-repository","text":"","title":"The Repo(sitory)"},{"location":"artifacts/#repository-layout","text":"This project includes the following files, i.e., \"artifacts\" in .py , . md , . txt and other formats, updated as of: 02/07/2022 (February 7th, 2022) /e-Invoice-Onboarding-Toolkit . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u251c\u2500\u2500 einvoice \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 delivery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 import_xsd.py \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2514\u2500\u2500 tests \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 test_import_xsd.py \u2502 \u251c\u2500\u2500 discovery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 accessor.py \u2502 \u2502 \u251c\u2500\u2500 app_handler.py \u2502 \u2502 \u251c\u2500\u2500 app_logging.py \u2502 \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 config_tool.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 smp_config.py \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.py \u2502 \u2502 \u251c\u2500\u2500 data \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 item_list.csv \u2502 \u2502 \u2502 \u2514\u2500\u2500 per_item_list.csv \u2502 \u2502 \u251c\u2500\u2500 dns_query.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 ebms-header.xml \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.py \u2502 \u2502 \u251c\u2500\u2500 line_item.py \u2502 \u2502 \u251c\u2500\u2500 party_address.py \u2502 \u2502 \u251c\u2500\u2500 semantic_model.py \u2502 \u2502 \u251c\u2500\u2500 smp_query.py \u2502 \u2502 \u251c\u2500\u2500 tests \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ez_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 flake8_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 hardcore_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 magic_linter.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 mypy_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pycodestyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pydocstyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pylint_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_accessor.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_app_logging.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_tracking_id.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_dns_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_line_item.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_party_address.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_semantic_model.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_smp_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn_hasher.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 unaptr_response.json \u2502 \u2502 \u251c\u2500\u2500 urn.py \u2502 \u2502 \u2514\u2500\u2500 urn_hasher.py \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 _license.md \u2502 \u2502 \u251c\u2500\u2500 accessor.md \u2502 \u2502 \u251c\u2500\u2500 app_logging.md \u2502 \u2502 \u251c\u2500\u2500 artifacts.md \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.md \u2502 \u2502 \u251c\u2500\u2500 custom_theme \u2502 \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u2514\u2500\u2500 main.html \u2502 \u2502 \u251c\u2500\u2500 dns_query.md \u2502 \u2502 \u251c\u2500\u2500 drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.3.drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.drawio \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participant 1.1.drawio \u2502 \u2502 \u251c\u2500\u2500 einvoice_design.xlsx \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.md \u2502 \u2502 \u251c\u2500\u2500 enabling_infrastructure_components.md \u2502 \u2502 \u251c\u2500\u2500 faq.md \u2502 \u2502 \u251c\u2500\u2500 flask_integration_on_docker.md \u2502 \u2502 \u251c\u2500\u2500 getting_started.md \u2502 \u2502 \u251c\u2500\u2500 git_workflow.md \u2502 \u2502 \u251c\u2500\u2500 google_colab_pages.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u251c\u2500\u2500 jupyterlab \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4_v2.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 dns_query.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20210119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 naptr_lookup.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 python_dev.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2502 \u251c\u2500\u2500 tracking_id_sandbox.ipynb \u2502 \u2502 \u2502 \u2514\u2500\u2500 urn_hash_work.ipynb \u2502 \u2502 \u251c\u2500\u2500 line_item.md \u2502 \u2502 \u251c\u2500\u2500 oasis_documentation.md \u2502 \u2502 \u251c\u2500\u2500 party_address.md \u2502 \u2502 \u251c\u2500\u2500 pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.4.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.3.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Participant 1.1.pdf \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participants 1.2.pdf \u2502 \u2502 \u251c\u2500\u2500 project_roadmap.md \u2502 \u2502 \u251c\u2500\u2500 python_dev_env.md \u2502 \u2502 \u251c\u2500\u2500 requirements.md \u2502 \u2502 \u251c\u2500\u2500 semantic_model.md \u2502 \u2502 \u251c\u2500\u2500 smp_query.md \u2502 \u2502 \u251c\u2500\u2500 start_to_finish.md \u2502 \u2502 \u251c\u2500\u2500 test_cases.md \u2502 \u2502 \u251c\u2500\u2500 todo.md \u2502 \u2502 \u251c\u2500\u2500 tools_and_resources.md \u2502 \u2502 \u251c\u2500\u2500 urn.md \u2502 \u2502 \u251c\u2500\u2500 urn_handler.md \u2502 \u2502 \u251c\u2500\u2500 urn_hasher.md \u2502 \u2502 \u251c\u2500\u2500 using_the_modules.md \u2502 \u2502 \u2514\u2500\u2500 working_with_the_code.md \u2502 \u2514\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 todo.md 13 directories, 109 files","title":"Repository Layout"},{"location":"assumptions/","text":"Diving in to the e-Invoice Onboarding Toolkit About This project offers examples of Python code written to interact with an access point or discovery service of a Four-Corner Model. Please see the Business Payments Coalition website for more information and an explanation of the Model. Assumptions The Four-Corner Model The software included with the project assumes a baseline understanding of the Four-Corner Model and its constituent components. Python The primary programming language chosen for the project is Python. To implement and run the code in this project requires a working knowledge of Python. This wiki and additional documentation are intended to further outline how the software is designed to implement the Four-Corner Model. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Assumptions"},{"location":"assumptions/#diving-in-to-the-e-invoice-onboarding-toolkit","text":"","title":"Diving in to the e-Invoice Onboarding Toolkit"},{"location":"assumptions/#about","text":"This project offers examples of Python code written to interact with an access point or discovery service of a Four-Corner Model. Please see the Business Payments Coalition website for more information and an explanation of the Model.","title":"About"},{"location":"assumptions/#assumptions","text":"","title":"Assumptions"},{"location":"assumptions/#the-four-corner-model","text":"The software included with the project assumes a baseline understanding of the Four-Corner Model and its constituent components.","title":"The Four-Corner Model"},{"location":"assumptions/#python","text":"The primary programming language chosen for the project is Python. To implement and run the code in this project requires a working knowledge of Python. This wiki and additional documentation are intended to further outline how the software is designed to implement the Four-Corner Model.","title":"Python"},{"location":"create_tracking_id/","text":"e-invoice Onboarding Toolkit API create_tracking_id Module ::: ediscovery.accessor.Accessor","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"create_tracking_id/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"create_tracking_id/#create_tracking_id-module","text":"::: ediscovery.accessor.Accessor","title":"create_tracking_id Module"},{"location":"dns_query/","text":"e-invoice Onboarding Toolkit API dns_query Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"dns_query/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"dns_query/#dns_query-module","text":"","title":"dns_query Module"},{"location":"einvoice_message_package/","text":"e-invoice Onboarding Toolkit API einvoice_message_package Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"einvoice_message_package/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"einvoice_message_package/#einvoice_message_package-module","text":"","title":"einvoice_message_package Module"},{"location":"enabling_infrastructure_components/","text":"Additional Infrastructure Build-out No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Additional Infrastructure Build-out"},{"location":"enabling_infrastructure_components/#additional-infrastructure-build-out","text":"","title":"Additional Infrastructure Build-out"},{"location":"faq/","text":"Questions... Q: Who is the audience for this project? A: This software is intended for those interested in participating as service endpoints in a Four-Corner Model framework. The code to implement in the repository is written in the Python programing language. Other toolsets to facilitate the initiative such as Markdown or Docker may also be incorporated where appropriate. Q: What do I need in order to use this code? A: Python 1. Some knowledge of Python 2. Python 3.6 or greater, Python 3.10 or greater is recommended. . Q: Does this code provide a full end-to-end solution to process an e-invoice? A: This code answers some very domain specific questions regarding e-invoice functionality in a Four-Corners Model framework. Specifically it's helpful with: 1. The hashing functionality to derive the urn for look-up in a DNS NAPTR record. 2. How to do the DNS NATPR lookup and extract the relevant SMP URI. 3. How to construct the two REST requests to an SMP server to retrieve a Corner 3 URI. 4. How to execute the REST requests to the SMP server. 5. How to extract the Corner 3 endpoint URI from the response from the SMP server. 6. Validating an e-Invoice ebXML message header for compliance with an AS4 conformance profile. Q: How do I use the code? A: There are a number of ways the code can be examined or worked with: 1. Start to finish example of the URI discovery process . 2. Test Cases which demonstrate functionality of the modules. 3. Jupyter Notebook sandbox environments at Google Colab Pages which isolate and demonstrate the code in a sandbox. 4. Package/Library API see the Index for links to the code API on the modules themselves. 5. Integration of an example discovery process implemented in a Flask application on a Docker container (forthcoming). No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"FAQ"},{"location":"faq/#questions","text":"Q: Who is the audience for this project? A: This software is intended for those interested in participating as service endpoints in a Four-Corner Model framework. The code to implement in the repository is written in the Python programing language. Other toolsets to facilitate the initiative such as Markdown or Docker may also be incorporated where appropriate. Q: What do I need in order to use this code? A: Python 1. Some knowledge of Python 2. Python 3.6 or greater, Python 3.10 or greater is recommended. . Q: Does this code provide a full end-to-end solution to process an e-invoice? A: This code answers some very domain specific questions regarding e-invoice functionality in a Four-Corners Model framework. Specifically it's helpful with: 1. The hashing functionality to derive the urn for look-up in a DNS NAPTR record. 2. How to do the DNS NATPR lookup and extract the relevant SMP URI. 3. How to construct the two REST requests to an SMP server to retrieve a Corner 3 URI. 4. How to execute the REST requests to the SMP server. 5. How to extract the Corner 3 endpoint URI from the response from the SMP server. 6. Validating an e-Invoice ebXML message header for compliance with an AS4 conformance profile. Q: How do I use the code? A: There are a number of ways the code can be examined or worked with: 1. Start to finish example of the URI discovery process . 2. Test Cases which demonstrate functionality of the modules. 3. Jupyter Notebook sandbox environments at Google Colab Pages which isolate and demonstrate the code in a sandbox. 4. Package/Library API see the Index for links to the code API on the modules themselves. 5. Integration of an example discovery process implemented in a Flask application on a Docker container (forthcoming).","title":"Questions..."},{"location":"flask_integration_on_docker/","text":"Flask Integration, Docker, etc. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Flask Integration, Docker, etc."},{"location":"flask_integration_on_docker/#flask-integration-docker-etc","text":"","title":"Flask Integration, Docker, etc."},{"location":"git_workflow/","text":"Sample git workflow A minimal git \"script\" to work with the code. This is a sample workflow of a very rudimentary process to create a branch in Github, add code, and push up to the repo on Github. Create a new branch: git checkout -b <insert branch name here`> Implement your changes Add into the repo: git add . git commit -m <your comment here> git push :pushes your changes up to the remote branch Either create a pull request in Github, or: git checkout main git merge <branch you want to merge here> git push to push main changes up to remote branch No Representations or Warranties This software is free and Open Source offered under an MIT license. The developers of the software make no representations or warranties as to the software or its fitness for a particular purpose. This code is meant for educational and research purposes only. The code is offered \"as-is\" and is not intended to be used in a production environment. It is intended for developers of software related to the 4-corners Model to use as a stepping-off point for further development efforts.","title":"Workflow"},{"location":"git_workflow/#sample-git-workflow","text":"","title":"Sample git workflow"},{"location":"git_workflow/#a-minimal-git-script-to-work-with-the-code","text":"This is a sample workflow of a very rudimentary process to create a branch in Github, add code, and push up to the repo on Github. Create a new branch: git checkout -b <insert branch name here`> Implement your changes Add into the repo: git add . git commit -m <your comment here> git push :pushes your changes up to the remote branch Either create a pull request in Github, or: git checkout main git merge <branch you want to merge here> git push to push main changes up to remote branch","title":"A minimal git \"script\" to work with the code."},{"location":"google_colab_pages/","text":"Jupyter Notebooks on Google Colab Colab Sandboxes JupyterLab is a sandbox development environment which allows for, among other things, rapid prototyping or testing of small units of code. They provide a framework to execute code without building a whole application or even a complete module. Most of the code already incorporated into the project started out in a JupyterLab runtime environment. JupyterLab is also great for documenting and demonstrating exactly what's going on with a piece of code. JupyterLab artifacts worked on for the project are stored as static documents in GitHub in the e-Invoice-Onboarding-Toolkit project under ./einvoice/docs/jupyterlab. Google Colab pages implement JupyterLab runtime with live sandbox environments. Pages can be linked from the e-Invoice-Onboarding-Toolkit GitHub repository, or pulled from the repository and saved locally by anyone with a Google account. urn hashing and DNS NAPTR lookup. Colab page with examples of how to hash the specification, the schema_id, and the party_id to create the urn and perform the natpr dns query is at this Colab page . Examples 6, 7, 8, and 9 run the hash and submit against DNS in real-time. The JupyterLab file is: urn_hash_work.ipynb . SMP query Colab page with examples of how to transform the urn and party_id and submit it to the SMP uri is at this Colab page . They JupyterLab file is: smp_url_transformations.ipynb . ebMS Message Header validation Colab pages with examples of reading an XSD file and validating an XML file has two Google Colab pages for different aspects of the work. Inspection and validation of the XSD file has this Google Colab Page . The JupyterLab file is: ebMS XML 3 schema.ipynb . Validation of an xml file against the XSD is done using this Google Colab Page The JupyterFile is: Validate_bdx-as4.ipynb . For ease of access these files are copies stored on the drive of one of the project Developers and is free and open to anyone to view and run. Interested individuals should make copies of the Labs for themselves and run on Google Colab under their own account or an instance of JupytyerLab running on Anaconda, VS Code, or a Python install. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"JupyterLab/Notebooks"},{"location":"google_colab_pages/#jupyter-notebooks-on-google-colab","text":"","title":"Jupyter Notebooks on Google Colab"},{"location":"google_colab_pages/#colab-sandboxes","text":"JupyterLab is a sandbox development environment which allows for, among other things, rapid prototyping or testing of small units of code. They provide a framework to execute code without building a whole application or even a complete module. Most of the code already incorporated into the project started out in a JupyterLab runtime environment. JupyterLab is also great for documenting and demonstrating exactly what's going on with a piece of code. JupyterLab artifacts worked on for the project are stored as static documents in GitHub in the e-Invoice-Onboarding-Toolkit project under ./einvoice/docs/jupyterlab. Google Colab pages implement JupyterLab runtime with live sandbox environments. Pages can be linked from the e-Invoice-Onboarding-Toolkit GitHub repository, or pulled from the repository and saved locally by anyone with a Google account.","title":"Colab Sandboxes"},{"location":"google_colab_pages/#urn-hashing-and-dns-naptr-lookup","text":"Colab page with examples of how to hash the specification, the schema_id, and the party_id to create the urn and perform the natpr dns query is at this Colab page . Examples 6, 7, 8, and 9 run the hash and submit against DNS in real-time. The JupyterLab file is: urn_hash_work.ipynb .","title":"urn hashing and DNS NAPTR lookup."},{"location":"google_colab_pages/#smp-query","text":"Colab page with examples of how to transform the urn and party_id and submit it to the SMP uri is at this Colab page . They JupyterLab file is: smp_url_transformations.ipynb .","title":"SMP query"},{"location":"google_colab_pages/#ebms-message-header-validation","text":"Colab pages with examples of reading an XSD file and validating an XML file has two Google Colab pages for different aspects of the work. Inspection and validation of the XSD file has this Google Colab Page . The JupyterLab file is: ebMS XML 3 schema.ipynb . Validation of an xml file against the XSD is done using this Google Colab Page The JupyterFile is: Validate_bdx-as4.ipynb . For ease of access these files are copies stored on the drive of one of the project Developers and is free and open to anyone to view and run. Interested individuals should make copies of the Labs for themselves and run on Google Colab under their own account or an instance of JupytyerLab running on Anaconda, VS Code, or a Python install.","title":"ebMS Message Header validation"},{"location":"index_orig/","text":"Welcome Welcome to the e-Invoice Onboarding Toolkit This is a repository for open source software tools created to facilitate market adoption of e-invoices implemented conformant with the Four-Corner interoperability model framework. For information about e-invoices and implementing the Four-Corner Model please visit the Business Payments Coalition website . Additional documentation, reference materials, and standards can be found on the Oasis-Open.org website . Start with the ebXML specification This Project FAQ Project Home Assumptions Tools and Resources Configure a Python Environment Package Requirements Working with the Code Using the Code Using the Modules Test Cases Start-to-Finish example JupyterLab/Notebooks <!-- - accessor.py app_logging.py create_tracking_id.py dns_query.py discovery_message_package.py line_item.py party_address.py semantic_model.py smp_query.py urn_handler.py urn_hasher.py urn.py --> Project Roadmap Enabling Infrastructure Components To do Project Artifacts Workflow Oasis Resources License No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Welcome"},{"location":"index_orig/#welcome","text":"Welcome to the e-Invoice Onboarding Toolkit This is a repository for open source software tools created to facilitate market adoption of e-invoices implemented conformant with the Four-Corner interoperability model framework. For information about e-invoices and implementing the Four-Corner Model please visit the Business Payments Coalition website . Additional documentation, reference materials, and standards can be found on the Oasis-Open.org website . Start with the ebXML specification","title":"Welcome"},{"location":"index_orig/#this-project","text":"FAQ Project Home Assumptions Tools and Resources Configure a Python Environment Package Requirements Working with the Code Using the Code Using the Modules Test Cases Start-to-Finish example JupyterLab/Notebooks <!-- - accessor.py app_logging.py create_tracking_id.py dns_query.py discovery_message_package.py line_item.py party_address.py semantic_model.py smp_query.py urn_handler.py urn_hasher.py urn.py --> Project Roadmap Enabling Infrastructure Components To do Project Artifacts Workflow Oasis Resources License","title":"This Project"},{"location":"line_item/","text":"e-invoice Onboarding Toolkit API line_item Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"line_item/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"line_item/#line_item-module","text":"","title":"line_item Module"},{"location":"oasis_documentation/","text":"OASIS Resources Links to referenced authoritative sources: Documents OASIS Specifications OASIS ebXML Messaging Services Version 3.0: Part1, Core Features OASIS Standard, October 1, 2007, has: OASIS ebXML Messaging Services Version 3.0: Part 2, Advanced Features dated June 30, 2010 with Normative Reference of: ebXML Messaging Services Version 3.0: Part 2, Advanced Features which is referenced by the following three namespace URIs. OASIS ebXML Messaging Services 3.0 Conformance Profiles , Committee Specification 1, dated April 24, 2010 references the same namespace URI of http://docs.oasis-open.org/ebxml-msg/ns/ebms/v3.0/profiles/200707. AS4 Profile of ebMS 3.0 Version 1.0 dated January 23, 2013. XML Schema Definitions XSD Files XSD File : ebms-header-3_0-200704 including snippets of sample XML and full SOAP for message headers. Note that the Namespace URI identified in Part1 is incorrect and returns an error message. XSD File : XSD for Routing Input reference parameter XSD File : MessageFragment XSD XSD File : Refactored Core Messaging XSD Namespace URIs Namespaces Namespace URI : ebXML Messaging Services Version 3.0 Core Features) and references: Namespace URI : ebXML Messaging V3 Part 2: Multihop Routing Namespace URI : ebXML Messaging V3 Part 2: Message Fragments Namespace URI : Resource Directory Description Language(RDDL) 2.0 and references the XSD files below. TBD Interoperable components under the AS4 Usage Agreements as specified in Section 5.2 of the AS4 Profile of ebMS are non-normative. (Excepting that the new AS4 Interoperability Profile for Four-Corners Model networks does attempt to make interoperation normative via P-Mode configuration.) Samples of SOAP including XML, XMLNS and XSLT are included in Appendix A of the AS4 Profile. It can be inferred from the ebXML Messaging V3 (ebMS3) namespace at http://docs.oasis-open.org/ebxml-msg/ns/ebms/v3.0/profiles/200707 that a namespace URI for the November 12th, 2021 Committee Conformance Profile specification would be called something similar to https://docs.oasis-open.org/bdxr/ns/bdx-as4/v1.0/profiles/202112 . That namespace or similar guidance has not yet been articulated by the Committee. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"OASIS Resources"},{"location":"oasis_documentation/#oasis-resources","text":"Links to referenced authoritative sources:","title":"OASIS Resources"},{"location":"oasis_documentation/#documents","text":"OASIS Specifications OASIS ebXML Messaging Services Version 3.0: Part1, Core Features OASIS Standard, October 1, 2007, has: OASIS ebXML Messaging Services Version 3.0: Part 2, Advanced Features dated June 30, 2010 with Normative Reference of: ebXML Messaging Services Version 3.0: Part 2, Advanced Features which is referenced by the following three namespace URIs. OASIS ebXML Messaging Services 3.0 Conformance Profiles , Committee Specification 1, dated April 24, 2010 references the same namespace URI of http://docs.oasis-open.org/ebxml-msg/ns/ebms/v3.0/profiles/200707. AS4 Profile of ebMS 3.0 Version 1.0 dated January 23, 2013.","title":"Documents"},{"location":"oasis_documentation/#xml-schema-definitions","text":"XSD Files XSD File : ebms-header-3_0-200704 including snippets of sample XML and full SOAP for message headers. Note that the Namespace URI identified in Part1 is incorrect and returns an error message. XSD File : XSD for Routing Input reference parameter XSD File : MessageFragment XSD XSD File : Refactored Core Messaging XSD","title":"XML Schema Definitions"},{"location":"oasis_documentation/#namespace-uris","text":"Namespaces Namespace URI : ebXML Messaging Services Version 3.0 Core Features) and references: Namespace URI : ebXML Messaging V3 Part 2: Multihop Routing Namespace URI : ebXML Messaging V3 Part 2: Message Fragments Namespace URI : Resource Directory Description Language(RDDL) 2.0 and references the XSD files below. TBD Interoperable components under the AS4 Usage Agreements as specified in Section 5.2 of the AS4 Profile of ebMS are non-normative. (Excepting that the new AS4 Interoperability Profile for Four-Corners Model networks does attempt to make interoperation normative via P-Mode configuration.) Samples of SOAP including XML, XMLNS and XSLT are included in Appendix A of the AS4 Profile. It can be inferred from the ebXML Messaging V3 (ebMS3) namespace at http://docs.oasis-open.org/ebxml-msg/ns/ebms/v3.0/profiles/200707 that a namespace URI for the November 12th, 2021 Committee Conformance Profile specification would be called something similar to https://docs.oasis-open.org/bdxr/ns/bdx-as4/v1.0/profiles/202112 . That namespace or similar guidance has not yet been articulated by the Committee.","title":"Namespace URIs"},{"location":"outcomes/","text":"Project Outcomes: Functionality Hashing functionality to derive the urn for look-up in a DNS NAPTR record. DNS NATPR lookup and extract the relevant SMP URI. Two REST requests to an SMP server to retrieve a Corner 3 URI. Execute the REST requests to the SMP server. Extract the Corner 3 endpoint URI from the response from the SMP server. Validate an e-Invoice ebXML message header for compliance with an AS4 conformance profile. Implementation Functional Python code: Construct the URN from the specification, schema ID, and party ID, urn_hasher.py Hash the URN per the requirements to create a NAPTR record for a DNS look-up to obtain SMP service URI. urn_hasher.py accessor.py Do the DNS look-up to obtain the SMP service URI. accessor.py dns_query.py Query the SMP URI using the ebXML spec. accessor.py smp_query.py Dataclass object comprised of specification, schema ID, party ID, and a sample JSON e-Invoice payload. einvoice_message_package.py line_item_py party_address.py semnantic_model.py urn.py Test cases implemented using Test Driven Development test_accessor.py test_app_logging.py test_create_sample_data.py test_create_tracking_id.py test_dns_query.py test_import_xsd.py test_line_item.py test_party_address.py test_semantic_model.py test_smp_query.py test_urn.py test_urn_hasher.py Logging implemented through custom logging using standard Python modules. app_loggiing.py Documentation and code artifacts for Infrastructure components: Demonstrating implementation of DNS infrastructure using Amazon Route53 and code to provision, update, and delete NATPR records, acting as the SML. Demonstrating implementation of SMP infrastructure to reply to the REST API for service functionally and AS4 final endpoint. Documentation Previously created documentation and diagrams which were outcomes of analysis and process review. Jupyter Lab Notebooks running on Google Colab for real-time examples of a dev sandbox. Hash URN and SML query Lab Notebook (Hash URN and SML query are in the same Notebook) SMP query Lab Notebook Review of AS4 XSD spec Lab Notebook Validation of ebMS sample message header against AS4 XSD Lab Notebook Implementation Guide Documentation site written by SEs and prepared with BSAs to facilitate utilization of the code and work product to be delivered via readthedocs.org site though the github repository. readthedocs.org site registration/creation Create document set using mkdocs-material hosted on github repository. Create list of assumptions FAQ and Outcomes pages for starting point/baseline documentation. Aggregation of above referenced artifacts hosted on github. To do A deployment package which includes Python code to: (In-progress)_ Creation of \"final\" Python package which delivers code artifacts as a library. Documentation (In-progress) Generated from python docstring using Sphinx mkdocs-material framework (In-progress) Documentation of supporting infrastructure including DNS and SMP provisioning specifically called out as a parallel value-add result of the project. Notes Test-driven development methodology is being implemented to include test cases for code as it is being developed and delivered. CI/CD process implemented via Github workflow has been validated to ensure PEP8 code standards and checks using Flake8, pylint, and pytest are valid. All changes and updates to code must pass CI/CD before it's merged into the repo. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Outcomes"},{"location":"outcomes/#project-outcomes","text":"","title":"Project Outcomes:"},{"location":"outcomes/#functionality","text":"Hashing functionality to derive the urn for look-up in a DNS NAPTR record. DNS NATPR lookup and extract the relevant SMP URI. Two REST requests to an SMP server to retrieve a Corner 3 URI. Execute the REST requests to the SMP server. Extract the Corner 3 endpoint URI from the response from the SMP server. Validate an e-Invoice ebXML message header for compliance with an AS4 conformance profile.","title":"Functionality"},{"location":"outcomes/#implementation","text":"Functional Python code: Construct the URN from the specification, schema ID, and party ID, urn_hasher.py Hash the URN per the requirements to create a NAPTR record for a DNS look-up to obtain SMP service URI. urn_hasher.py accessor.py Do the DNS look-up to obtain the SMP service URI. accessor.py dns_query.py Query the SMP URI using the ebXML spec. accessor.py smp_query.py Dataclass object comprised of specification, schema ID, party ID, and a sample JSON e-Invoice payload. einvoice_message_package.py line_item_py party_address.py semnantic_model.py urn.py Test cases implemented using Test Driven Development test_accessor.py test_app_logging.py test_create_sample_data.py test_create_tracking_id.py test_dns_query.py test_import_xsd.py test_line_item.py test_party_address.py test_semantic_model.py test_smp_query.py test_urn.py test_urn_hasher.py Logging implemented through custom logging using standard Python modules. app_loggiing.py Documentation and code artifacts for Infrastructure components: Demonstrating implementation of DNS infrastructure using Amazon Route53 and code to provision, update, and delete NATPR records, acting as the SML. Demonstrating implementation of SMP infrastructure to reply to the REST API for service functionally and AS4 final endpoint. Documentation Previously created documentation and diagrams which were outcomes of analysis and process review. Jupyter Lab Notebooks running on Google Colab for real-time examples of a dev sandbox. Hash URN and SML query Lab Notebook (Hash URN and SML query are in the same Notebook) SMP query Lab Notebook Review of AS4 XSD spec Lab Notebook Validation of ebMS sample message header against AS4 XSD Lab Notebook Implementation Guide Documentation site written by SEs and prepared with BSAs to facilitate utilization of the code and work product to be delivered via readthedocs.org site though the github repository. readthedocs.org site registration/creation Create document set using mkdocs-material hosted on github repository. Create list of assumptions FAQ and Outcomes pages for starting point/baseline documentation. Aggregation of above referenced artifacts hosted on github.","title":"Implementation"},{"location":"outcomes/#to-do","text":"A deployment package which includes Python code to: (In-progress)_ Creation of \"final\" Python package which delivers code artifacts as a library. Documentation (In-progress) Generated from python docstring using Sphinx mkdocs-material framework (In-progress) Documentation of supporting infrastructure including DNS and SMP provisioning specifically called out as a parallel value-add result of the project.","title":"To do"},{"location":"outcomes/#notes","text":"Test-driven development methodology is being implemented to include test cases for code as it is being developed and delivered. CI/CD process implemented via Github workflow has been validated to ensure PEP8 code standards and checks using Flake8, pylint, and pytest are valid. All changes and updates to code must pass CI/CD before it's merged into the repo.","title":"Notes"},{"location":"party_address/","text":"e-invoice Onboarding Toolkit API party_address Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"party_address/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"party_address/#party_address-module","text":"","title":"party_address Module"},{"location":"project_roadmap/","text":"Project Roadmap Discovery #1 - SML NAPTR DNS Lookup Feature \u2013 Access Point A sends UNAPTR DNS query with a Party ID/Party ID Schema hash and obtains a valid response with connection information to the SMP. Action Actor Scoped? Generate the request to Access Point A, which includes Party ID, Party ID Schema, Invoice Data Seller No Transform and format contents of Seller\u2019s request to create UNAPTR DNS query. Access Point A Yes Query DNS. Access Point A Yes Return response to query. SML \u2013 Reply from UNAPTR DNS query. No Receive query response from DNS, which is the URI to the SMP Access Point A Yes Discovery #2 - SMP REST API Query Feature \u2013Access Point A sends a REST API query to the SMP URI to obtain a valid response with connection info of target Access Point and customers invoice capabilities. Action Actor Scoped? Send response with SMP URI to Access Point. SML No (not in this feature) Create REST query to service provider to obtain buyer\u2019s service capabilities. Access Point A Yes Send REST query to service provider to obtain participant\u2019s service capabilities. Access Point A Yes Receive query and send response with Sellers Capabilities and route to endpoint. SMP No Receive response to query of participant\u2019s capabilities. Access Point A Yes Delivery - AS4 Message Exchange Feature \u2013 An invoice with a semantically correct format is delivered using AS4 protocol. Action Actor Scoped? Compose semantically correct e-Invoice based on response from service provider about participant\u2019s capabilities. Access Point A Yes Format e-Invoice in compliant AS4 format. Access Point A Yes Send e-Invoice to final destination obtained from SMP service provider. Access Point A Yes Receives the request. Access Point B No No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Project Roadmap"},{"location":"project_roadmap/#project-roadmap","text":"","title":"Project Roadmap"},{"location":"project_roadmap/#discovery-1-sml-naptr-dns-lookup","text":"Feature \u2013 Access Point A sends UNAPTR DNS query with a Party ID/Party ID Schema hash and obtains a valid response with connection information to the SMP. Action Actor Scoped? Generate the request to Access Point A, which includes Party ID, Party ID Schema, Invoice Data Seller No Transform and format contents of Seller\u2019s request to create UNAPTR DNS query. Access Point A Yes Query DNS. Access Point A Yes Return response to query. SML \u2013 Reply from UNAPTR DNS query. No Receive query response from DNS, which is the URI to the SMP Access Point A Yes","title":"Discovery #1 - SML NAPTR DNS Lookup"},{"location":"project_roadmap/#discovery-2-smp-rest-api-query","text":"Feature \u2013Access Point A sends a REST API query to the SMP URI to obtain a valid response with connection info of target Access Point and customers invoice capabilities. Action Actor Scoped? Send response with SMP URI to Access Point. SML No (not in this feature) Create REST query to service provider to obtain buyer\u2019s service capabilities. Access Point A Yes Send REST query to service provider to obtain participant\u2019s service capabilities. Access Point A Yes Receive query and send response with Sellers Capabilities and route to endpoint. SMP No Receive response to query of participant\u2019s capabilities. Access Point A Yes","title":"Discovery #2 - SMP REST API Query"},{"location":"project_roadmap/#delivery-as4-message-exchange","text":"Feature \u2013 An invoice with a semantically correct format is delivered using AS4 protocol. Action Actor Scoped? Compose semantically correct e-Invoice based on response from service provider about participant\u2019s capabilities. Access Point A Yes Format e-Invoice in compliant AS4 format. Access Point A Yes Send e-Invoice to final destination obtained from SMP service provider. Access Point A Yes Receives the request. Access Point B No","title":"Delivery - AS4 Message Exchange"},{"location":"python_dev_env/","text":"Configure a Python Dev Environment Respecting individual preferences and work style these are some suggested guidelines for creation of a Python development environment. These are consistent with Python standards and best practices and appropriate as a starting point for professional software development in Python. Installing Python The correct method of installing Python varies depending on the OS. Here are some considerations based on popular OS. OS Considerations MacOS Mac OS comes configured with Python 2.x. Don't attempt to remove it or replace it . Homebrew is a package installer for Mac. However given some past and outstanding issues between Homebrew and Python, versions of Python prior to Python 3.7 may generate errors on install. Apple XCode Developer Tools installs Git and a version of Python. Available through the App Store it is a large download and system intensive program. A more granular installation would be the XCode Command Line Tools which installs Git combined with a Python install pulled directly from Python.org. WindowsOS Python is now available on the Windows Store , though updates may lag behind current Python releases. Ease of setting environment variables makes it easy to maintain multiple installed versions simultaneously. This configuration is the easiest to integrate VS Code with Python. Windows WLS2 A fully native Python install on Ubuntu is available for Windows Subsystem for Linux 2 . The version of Python may need to be updated from a secondary repository as the official Ubuntu version trails official Python releases. Integration between VS Code running on Windows and integration with WSL2 Python may not be seamless. Linux A variety of package managers based on the installed distro may impact the ease of installing current Python releases and updates, but overall this possibly the easiest to \"OS\" to install and maintain Python. Python3 Python is \"officially\" referred to and invoked by specfiying either Python 2.x as \"Python2\" or Python 3.x.x as \"Python3.\" The difference is generally trivial except on Macs where Python2 is included as part of the OS install. On Mac and Linux based systems, adding an alias to .bashrc or .zshrc is an easy way to prevent inadvertent references to an incorrect version of Python, e.g., alias python='python3' alias pip='pip3' Note that the above included an alias for pip to pip3 as well. Create a virtual environment to use for Dev A Python virtual environment is a development \"sandbox\" which allows for segmentation of development environments. This allows for management of different combinations and versions of Python releases, deployed packages, development and testing environments, and shifting between entirely different development projects. See the Python documentation for venv for a more detailed explanation and rationalization of Python virtual environments. The use of Python virtual environments can't be overstated as a best practice to organize Python versions and package management. PEP-405 Creating virtual environments to use in Python programming can be done entirely with packages that are include in the Pthyon install or by additional third party applications. The choice of tools to create and manage Python virtual environments is dependent on situation, preference, and use case. Tool/App Use Case venv Implementation of the virtualenv as a Python module included in the Python install since v.3.3. This is the \"goto\" tool of choice. virtualenv Includes features not included in venv (see the comparison ). Anaconda A heavyweight package and virtual environment manager. It acts as an \"all in one\" for Python application versions, package management, virtual environments, additional programming languages such as R and Julia and tools such as visualizers and IDEs. The full fledged install can overtax some systems and performance can suffer an overly ambitious installation configuration. A personal license for individuals is free for non-commercial use. Use by for-profit or governmental organizations with more than 200 people requires licensing. miniconda A slimmed down version of Anaconda focussed on virtual environment and package management, includes only conda and Python, not open source, but free. conda The open source package manager utilized by Anaconda and miniconda. pip Included in Python 3.4 and later, this tool does not manage the virtual environment but does handle package management for both venv and virtualenv. Not all python tools have been integrated into the Anaconda repositories or packages for install. Some, such as mkdocs, must still be installed via pip even when using Anaconda3 or miniconda. 'virtualenv venv' vs. 'venv virtualenv' Avoid the confusion of the typical example given in the documentation of virtualenv which uses the command executed as \"virtualenv venv.\" This calls virtualenv to create a virtual environment named venv . Compare with \"venv virtualenv\" which calls venv to create a virtual environment called virtualenv . For most practical purposes when using Python 3.6 or greater it doesn't matter whether venv or virtualenv is used to create the virtual instance. But don't use \"virtualenv venv.\" That's just obnoxious. Other Python Tools Other tools such as virtualenvwrapper , pipenv , pew , tox and nox may be useful but are not currently utilized in this project. Pyenv was deprecated in Python 3.5 and not utilized. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Configure a Python Dev Environment"},{"location":"python_dev_env/#configure-a-python-dev-environment","text":"Respecting individual preferences and work style these are some suggested guidelines for creation of a Python development environment. These are consistent with Python standards and best practices and appropriate as a starting point for professional software development in Python.","title":"Configure a Python Dev Environment"},{"location":"python_dev_env/#installing-python","text":"The correct method of installing Python varies depending on the OS. Here are some considerations based on popular OS. OS Considerations MacOS Mac OS comes configured with Python 2.x. Don't attempt to remove it or replace it . Homebrew is a package installer for Mac. However given some past and outstanding issues between Homebrew and Python, versions of Python prior to Python 3.7 may generate errors on install. Apple XCode Developer Tools installs Git and a version of Python. Available through the App Store it is a large download and system intensive program. A more granular installation would be the XCode Command Line Tools which installs Git combined with a Python install pulled directly from Python.org. WindowsOS Python is now available on the Windows Store , though updates may lag behind current Python releases. Ease of setting environment variables makes it easy to maintain multiple installed versions simultaneously. This configuration is the easiest to integrate VS Code with Python. Windows WLS2 A fully native Python install on Ubuntu is available for Windows Subsystem for Linux 2 . The version of Python may need to be updated from a secondary repository as the official Ubuntu version trails official Python releases. Integration between VS Code running on Windows and integration with WSL2 Python may not be seamless. Linux A variety of package managers based on the installed distro may impact the ease of installing current Python releases and updates, but overall this possibly the easiest to \"OS\" to install and maintain Python. Python3 Python is \"officially\" referred to and invoked by specfiying either Python 2.x as \"Python2\" or Python 3.x.x as \"Python3.\" The difference is generally trivial except on Macs where Python2 is included as part of the OS install. On Mac and Linux based systems, adding an alias to .bashrc or .zshrc is an easy way to prevent inadvertent references to an incorrect version of Python, e.g., alias python='python3' alias pip='pip3' Note that the above included an alias for pip to pip3 as well.","title":"Installing Python"},{"location":"python_dev_env/#create-a-virtual-environment-to-use-for-dev","text":"A Python virtual environment is a development \"sandbox\" which allows for segmentation of development environments. This allows for management of different combinations and versions of Python releases, deployed packages, development and testing environments, and shifting between entirely different development projects. See the Python documentation for venv for a more detailed explanation and rationalization of Python virtual environments. The use of Python virtual environments can't be overstated as a best practice to organize Python versions and package management. PEP-405 Creating virtual environments to use in Python programming can be done entirely with packages that are include in the Pthyon install or by additional third party applications. The choice of tools to create and manage Python virtual environments is dependent on situation, preference, and use case. Tool/App Use Case venv Implementation of the virtualenv as a Python module included in the Python install since v.3.3. This is the \"goto\" tool of choice. virtualenv Includes features not included in venv (see the comparison ). Anaconda A heavyweight package and virtual environment manager. It acts as an \"all in one\" for Python application versions, package management, virtual environments, additional programming languages such as R and Julia and tools such as visualizers and IDEs. The full fledged install can overtax some systems and performance can suffer an overly ambitious installation configuration. A personal license for individuals is free for non-commercial use. Use by for-profit or governmental organizations with more than 200 people requires licensing. miniconda A slimmed down version of Anaconda focussed on virtual environment and package management, includes only conda and Python, not open source, but free. conda The open source package manager utilized by Anaconda and miniconda. pip Included in Python 3.4 and later, this tool does not manage the virtual environment but does handle package management for both venv and virtualenv. Not all python tools have been integrated into the Anaconda repositories or packages for install. Some, such as mkdocs, must still be installed via pip even when using Anaconda3 or miniconda. 'virtualenv venv' vs. 'venv virtualenv' Avoid the confusion of the typical example given in the documentation of virtualenv which uses the command executed as \"virtualenv venv.\" This calls virtualenv to create a virtual environment named venv . Compare with \"venv virtualenv\" which calls venv to create a virtual environment called virtualenv . For most practical purposes when using Python 3.6 or greater it doesn't matter whether venv or virtualenv is used to create the virtual instance. But don't use \"virtualenv venv.\" That's just obnoxious. Other Python Tools Other tools such as virtualenvwrapper , pipenv , pew , tox and nox may be useful but are not currently utilized in this project. Pyenv was deprecated in Python 3.5 and not utilized.","title":"Create a virtual environment to use for Dev"},{"location":"requirements/","text":"Project Package Requirements Currently implemented packages: This project utilizes the following packages, all of which should be available under an Open Source license via Py . List updated as of: 02/07/2022 (February 7th, 2022) Implement the packages in bold and most of the others should be brought along with. Make sure to source the virtual environment first and then ' pip | conda install ' to bring in the package. alabaster argh astroid attrs Babel brotlipy certifi cffi charset-normalizer click colorama cryptography dnspython docutils elementpath Faker flake8 future ghp-import idna imagesize importlib-metadata iniconfig isort Jinja2 joblib lazy-object-proxy livereload lunr Markdown MarkupSafe mccabe mergedeep mkdocs mkdocs-autorefs mkdocs-bootstrap mkdocs-material mkdocs-material-extensions mkdocstrings mypy mypy-extensions nltk packaging platformdirs pluggy psutil py pycodestyle pycparser pydocstyle pyflakes Pygments pylint pymdown-extensions pyOpenSSL pyparsing PySocks pytest python-dateutil python-dotenv pytkdocs pytz PyYAML pyyaml_env_tag regex requests six snowballstemmer Sphinx sphinxcontrib-applehelp sphinxcontrib-devhelp sphinxcontrib-htmlhelp sphinxcontrib-jsmath sphinxcontrib-qthelp sphinxcontrib-serializinghtml text-unidecode toml tomli tornado tqdm typing_extensions urllib3 watchdog wrapt xmlschema zipp No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Package Requirements"},{"location":"requirements/#project-package-requirements","text":"","title":"Project Package Requirements"},{"location":"requirements/#currently-implemented-packages","text":"This project utilizes the following packages, all of which should be available under an Open Source license via Py . List updated as of: 02/07/2022 (February 7th, 2022) Implement the packages in bold and most of the others should be brought along with. Make sure to source the virtual environment first and then ' pip | conda install ' to bring in the package. alabaster argh astroid attrs Babel brotlipy certifi cffi charset-normalizer click colorama cryptography dnspython docutils elementpath Faker flake8 future ghp-import idna imagesize importlib-metadata iniconfig isort Jinja2 joblib lazy-object-proxy livereload lunr Markdown MarkupSafe mccabe mergedeep mkdocs mkdocs-autorefs mkdocs-bootstrap mkdocs-material mkdocs-material-extensions mkdocstrings mypy mypy-extensions nltk packaging platformdirs pluggy psutil py pycodestyle pycparser pydocstyle pyflakes Pygments pylint pymdown-extensions pyOpenSSL pyparsing PySocks pytest python-dateutil python-dotenv pytkdocs pytz PyYAML pyyaml_env_tag regex requests six snowballstemmer Sphinx sphinxcontrib-applehelp sphinxcontrib-devhelp sphinxcontrib-htmlhelp sphinxcontrib-jsmath sphinxcontrib-qthelp sphinxcontrib-serializinghtml text-unidecode toml tomli tornado tqdm typing_extensions urllib3 watchdog wrapt xmlschema zipp","title":"Currently implemented packages:"},{"location":"semantic_model/","text":"e-invoice Onboarding Toolkit API semantic_model Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"semantic_model/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"semantic_model/#semantic_model-module","text":"","title":"semantic_model Module"},{"location":"smp_query/","text":"e-invoice Onboarding Toolkit API smp_query Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"smp_query/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"smp_query/#smp_query-module","text":"","title":"smp_query Module"},{"location":"start_to_finish/","text":"Start-to-Finish Start-to-Finish Integration There is not currently an \"end-to-end\" test for the e-Invoice Four-Corner Model to validate the workflow in its entirety. The next best use case is a \"Start-to-Finish\" of the discovery process. This \"Start-to-Finish\" entails valdating: 1. The hashing functionality to derive the urn for look-up from the specification, the party ID, and the schema ID. 2. Executing the DNS NATPR lookup and extracting the relevant SMP URI. 3. Constructing the two REST requests including the smp service group url and the smp service url . 4. Executing the two REST requests to the SMP server. 5. Extracting the Corner 3 endpoint URI from the response from the SMP server. This funcitonality is provided in the accessor.py module and validation is done in a single test case called test_accessor.py. Execute the \"Start-to-Finish\" test as reference in the more detailed instructions for running the test cases . ./einvoice/discovery/pytest tests/test_accessor.py Successful completion of \"Start-to-Finish\" test case. Further review and analysis of the the Start-to_Finish process can be found in the app.log which for the accessor.py module resides in the ./einvoice/discovery directory. Successful completion of \"Start-to-Finish\" test case recorded in the app.log file. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Start-to-Finish"},{"location":"start_to_finish/#start-to-finish","text":"","title":"Start-to-Finish"},{"location":"start_to_finish/#start-to-finish-integration","text":"There is not currently an \"end-to-end\" test for the e-Invoice Four-Corner Model to validate the workflow in its entirety. The next best use case is a \"Start-to-Finish\" of the discovery process. This \"Start-to-Finish\" entails valdating: 1. The hashing functionality to derive the urn for look-up from the specification, the party ID, and the schema ID. 2. Executing the DNS NATPR lookup and extracting the relevant SMP URI. 3. Constructing the two REST requests including the smp service group url and the smp service url . 4. Executing the two REST requests to the SMP server. 5. Extracting the Corner 3 endpoint URI from the response from the SMP server. This funcitonality is provided in the accessor.py module and validation is done in a single test case called test_accessor.py. Execute the \"Start-to-Finish\" test as reference in the more detailed instructions for running the test cases . ./einvoice/discovery/pytest tests/test_accessor.py Successful completion of \"Start-to-Finish\" test case. Further review and analysis of the the Start-to_Finish process can be found in the app.log which for the accessor.py module resides in the ./einvoice/discovery directory. Successful completion of \"Start-to-Finish\" test case recorded in the app.log file.","title":"Start-to-Finish Integration"},{"location":"test_cases/","text":"e-Invoice Onboarding Tool-kit Working with the code Test Cases Every module includes a test module in the child /tests directory. Test cases are writen as functions, not classes. The test cases are written as functions and CAN be directly called from the command line. Use Pytest to run the test cases. The use case for the test cases include using Pytest. The Pytest package must be installed in your Python distribution. From the a terminal console, change directory into the ./einvoice/discovery or ./einvoice/delivery directory. To see the list of available test files, either in your file browser or via the command line (\"dir .\\tests\\\" or \"ls -al ./tests/\"). Pytest must be executed from the parent dir. Out of the box, a quirk of Pytest is that without additional configuration it must be run from within the parent directory of where the test files are actually located. Pytest will automatically look for files formatted as test files, with \"test\" in the lead of the filename. To execute an inidivdual test the syntax is: pytest tests/test_app_logging.py No test is dependent on any other, and each may be run on it one, or run them all at once, in any order. The test will run and either the \"assert\" statement inside will pass, or it will fail. Failures MUST be resolved prior to attempting to check code into GitHub as our baseline CI/CD process checks for these failures before committing and will not continue if any are found. The included assert statements currently test a variety of cases up to validation of urn creation, query of the NAPTR DNS record, REST API call to the SMP, and validation of the ebMS header against the AS4 conformance profile. Successful completion of all test cases. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Test Cases"},{"location":"test_cases/#e-invoice-onboarding-tool-kit","text":"","title":"e-Invoice Onboarding Tool-kit"},{"location":"test_cases/#working-with-the-code","text":"","title":"Working with the code"},{"location":"test_cases/#test-cases","text":"Every module includes a test module in the child /tests directory. Test cases are writen as functions, not classes. The test cases are written as functions and CAN be directly called from the command line. Use Pytest to run the test cases. The use case for the test cases include using Pytest. The Pytest package must be installed in your Python distribution. From the a terminal console, change directory into the ./einvoice/discovery or ./einvoice/delivery directory. To see the list of available test files, either in your file browser or via the command line (\"dir .\\tests\\\" or \"ls -al ./tests/\"). Pytest must be executed from the parent dir. Out of the box, a quirk of Pytest is that without additional configuration it must be run from within the parent directory of where the test files are actually located. Pytest will automatically look for files formatted as test files, with \"test\" in the lead of the filename. To execute an inidivdual test the syntax is: pytest tests/test_app_logging.py No test is dependent on any other, and each may be run on it one, or run them all at once, in any order. The test will run and either the \"assert\" statement inside will pass, or it will fail. Failures MUST be resolved prior to attempting to check code into GitHub as our baseline CI/CD process checks for these failures before committing and will not continue if any are found. The included assert statements currently test a variety of cases up to validation of urn creation, query of the NAPTR DNS record, REST API call to the SMP, and validation of the ebMS header against the AS4 conformance profile. Successful completion of all test cases.","title":"Test Cases"},{"location":"todo/","text":"To do: List of Deliverables A deployment package which includes Python code to: (In-progress)_ Creation of \"final\" Python package which delivers code artifacts as a library. Documentation (In-progress) Generated from python docstring using Sphinx mkdocs-material framework (In-progress) Documentation of supporting infrastructure including DNS and SMP provisioning specifically called out as a parallel value-add result of the project. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"To do:<hr>"},{"location":"todo/#to-do","text":"","title":"To do:"},{"location":"todo/#list-of-deliverables","text":"A deployment package which includes Python code to: (In-progress)_ Creation of \"final\" Python package which delivers code artifacts as a library. Documentation (In-progress) Generated from python docstring using Sphinx mkdocs-material framework (In-progress) Documentation of supporting infrastructure including DNS and SMP provisioning specifically called out as a parallel value-add result of the project.","title":"List of Deliverables"},{"location":"tools_and_resources/","text":"Tools and Resources GOAL: Create, test, deploy, and maintain code to the highest professional standards. HOW: Tools and best practices which facilitate development of high quality code with testable and reproducible outcomes. Quick Guide Tool Minimal requirements\u00df Programming Language Python 3.6 or above. Computer Supports running Python 3.6 or above. OS Mac, Windows, or Windows w/WSL2. Documents and resources. GitHub and BPC-Technical-Workgroup-Folder - Google Drive Programming Languages The primary programming language for the project is Python. Knowledge of other enabling technologies, specifically shell scripting (e.g., ZSH, BASH, or PowerShell) and CommonMark or GitHub Flavored Markdown may be helpful. All effort will be made to remain within the Python Standard Library . Other publicly hosted packages with an open source license may be implemented. Version of Python Select a minimum version of Python 3.6. This will include newer features such as f-string. Python 3.10 is recommended. Computer Spec You will need a computer which is able to download and run Python 3.6. Operating System OS Considerations Mac OS Included system version of Python 2.x must be respected. Make sure to use Python virtual environments. Homebrew package manager is a plus. Windows Latest version of Python are now available on the Windows Store. Anaconda3 is an especially good option in this OS. Windows w/WSL2 Great implementation of Ubuntu on Windows is truly impressive. Integration of virtual environments and Python executable with an IDE like VS Code can be finicky. Linux Native support for distributed technologies, i.e., Kubernetes and Docker. Chrome OS Limited on-device resources but a growing number of online and cloud development options, e.g., AWS, Azure, OpenShift, JupyterLab and Notebooks. Raspberry PI With native Python support, Linux packages, and cloud options there is no reason dev is not an option. These options show that there is nothing proprietary, exclusive, or given preference other than resource availability and personal preference. Additional Configuration and Environment Considerations Future looking consideration for implementation of additional Python enabling technology in support of scalability, portability, and resiliency includes: Frameworks: Django Flask FastAPI OpenAPI Containerization and Cloud Services: Docker Local testing of Docker containerization may be done on a desktop, however a cloud implementation is the typical endpoint for a container deployment. Cloud services such as: Amazon Web Services (AWS) including lambdas and Route53 DNS Microsoft Azure RedHat OpenShift Additional infrastructure components may be implemented by the Project for testing or prototyping utilization of cloud services. The implementation of a cloud service and choice of provider is entirely the responsibility of the implementer of the code. Code artifacts included here which implement cloud services are examples for research and educational purposes only. No preference or endorsement is given to any provider. Python Programming Methodologies, Standards, and Tools: Some standards: PEP20 PEP8 Guiding Design Principles from the Scientific Python Cookiecutter . Python Doc the official Python web site page of references to more documentation. See the list of books below for additional guidance on standards and best practices in Python development . Tools to implement the standards(preferred ones in bold ) . flake8 autopep8 pylint pytest unittest black (Careful! - Handles most formatting well but line character length may not be handed as desired.) bandit mypy pycodestyle pydocstyle Development methodologies * Documentation and use of docstrings * Domain Driven Design * Test Driven Development * Agile principles applied appropriate to the the size and state of the project. Books There are many great reference materials in print and on the Internet about Python development. The list below contains some of the titles the developers consider the most helpful and authoritative, regardless of level of expertise with Python. (Titles and author only, no affiliate links.) The Hitchhiker's Guide to Python by Kenneth Reitz and Tanya Schlusser. On-line for free at docs.python-guide.org . Serious Python by Julien Danjou Domain-Driven Design Distilled by Vaughn Vernon Domain Driven Design: Tackling Complexity in the Heart of Software by Eric Evans Test Driven Development with Python: Obey the Testing Goat, etc. by Harry J.W. Percival. Also available online for free , which works for a quick reference in a pinch. Architecture Patterns with Python by Harry J.W. Percival and Bob Gregory Pro Git by Scott Chacon and Ben Straub. Available as a free download under an open source license. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Tools and Resources"},{"location":"tools_and_resources/#tools-and-resources","text":"GOAL: Create, test, deploy, and maintain code to the highest professional standards. HOW: Tools and best practices which facilitate development of high quality code with testable and reproducible outcomes.","title":"Tools and Resources"},{"location":"tools_and_resources/#quick-guide","text":"Tool Minimal requirements\u00df Programming Language Python 3.6 or above. Computer Supports running Python 3.6 or above. OS Mac, Windows, or Windows w/WSL2. Documents and resources. GitHub and BPC-Technical-Workgroup-Folder - Google Drive","title":"Quick Guide"},{"location":"tools_and_resources/#programming-languages","text":"The primary programming language for the project is Python. Knowledge of other enabling technologies, specifically shell scripting (e.g., ZSH, BASH, or PowerShell) and CommonMark or GitHub Flavored Markdown may be helpful. All effort will be made to remain within the Python Standard Library . Other publicly hosted packages with an open source license may be implemented.","title":"Programming Languages"},{"location":"tools_and_resources/#version-of-python","text":"Select a minimum version of Python 3.6. This will include newer features such as f-string. Python 3.10 is recommended.","title":"Version of Python"},{"location":"tools_and_resources/#computer-spec","text":"You will need a computer which is able to download and run Python 3.6.","title":"Computer Spec"},{"location":"tools_and_resources/#operating-system","text":"OS Considerations Mac OS Included system version of Python 2.x must be respected. Make sure to use Python virtual environments. Homebrew package manager is a plus. Windows Latest version of Python are now available on the Windows Store. Anaconda3 is an especially good option in this OS. Windows w/WSL2 Great implementation of Ubuntu on Windows is truly impressive. Integration of virtual environments and Python executable with an IDE like VS Code can be finicky. Linux Native support for distributed technologies, i.e., Kubernetes and Docker. Chrome OS Limited on-device resources but a growing number of online and cloud development options, e.g., AWS, Azure, OpenShift, JupyterLab and Notebooks. Raspberry PI With native Python support, Linux packages, and cloud options there is no reason dev is not an option. These options show that there is nothing proprietary, exclusive, or given preference other than resource availability and personal preference.","title":"Operating System"},{"location":"tools_and_resources/#additional-configuration-and-environment-considerations","text":"Future looking consideration for implementation of additional Python enabling technology in support of scalability, portability, and resiliency includes:","title":"Additional Configuration and Environment Considerations"},{"location":"tools_and_resources/#frameworks","text":"Django Flask FastAPI OpenAPI","title":"Frameworks:"},{"location":"tools_and_resources/#containerization-and-cloud-services","text":"Docker Local testing of Docker containerization may be done on a desktop, however a cloud implementation is the typical endpoint for a container deployment. Cloud services such as: Amazon Web Services (AWS) including lambdas and Route53 DNS Microsoft Azure RedHat OpenShift Additional infrastructure components may be implemented by the Project for testing or prototyping utilization of cloud services. The implementation of a cloud service and choice of provider is entirely the responsibility of the implementer of the code. Code artifacts included here which implement cloud services are examples for research and educational purposes only. No preference or endorsement is given to any provider.","title":"Containerization and Cloud Services:"},{"location":"tools_and_resources/#python-programming-methodologies-standards-and-tools","text":"Some standards: PEP20 PEP8 Guiding Design Principles from the Scientific Python Cookiecutter . Python Doc the official Python web site page of references to more documentation. See the list of books below for additional guidance on standards and best practices in Python development . Tools to implement the standards(preferred ones in bold ) . flake8 autopep8 pylint pytest unittest black (Careful! - Handles most formatting well but line character length may not be handed as desired.) bandit mypy pycodestyle pydocstyle Development methodologies * Documentation and use of docstrings * Domain Driven Design * Test Driven Development * Agile principles applied appropriate to the the size and state of the project.","title":"Python Programming Methodologies, Standards, and Tools:"},{"location":"tools_and_resources/#books","text":"There are many great reference materials in print and on the Internet about Python development. The list below contains some of the titles the developers consider the most helpful and authoritative, regardless of level of expertise with Python. (Titles and author only, no affiliate links.) The Hitchhiker's Guide to Python by Kenneth Reitz and Tanya Schlusser. On-line for free at docs.python-guide.org . Serious Python by Julien Danjou Domain-Driven Design Distilled by Vaughn Vernon Domain Driven Design: Tackling Complexity in the Heart of Software by Eric Evans Test Driven Development with Python: Obey the Testing Goat, etc. by Harry J.W. Percival. Also available online for free , which works for a quick reference in a pinch. Architecture Patterns with Python by Harry J.W. Percival and Bob Gregory Pro Git by Scott Chacon and Ben Straub. Available as a free download under an open source license.","title":"Books"},{"location":"urn/","text":"e-invoice Onboarding Toolkit API urn Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"urn/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"urn/#urn-module","text":"","title":"urn Module"},{"location":"urn_handler/","text":"e-invoice Onboarding Toolkit API urn_handler Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"urn_handler/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"urn_handler/#urn_handler-module","text":"","title":"urn_handler Module"},{"location":"urn_hasher/","text":"e-invoice Onboarding Toolkit API urn_hasher Module No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"e-invoice Onboarding Toolkit API<hr/>"},{"location":"urn_hasher/#e-invoice-onboarding-toolkit-api","text":"","title":"e-invoice Onboarding Toolkit API"},{"location":"urn_hasher/#urn_hasher-module","text":"","title":"urn_hasher Module"},{"location":"using_the_modules/","text":"Integrating Code Modules The Package Structure and Using the Modules How the package is organized. The top level of the packages is named \"einvoice.\" It is the parent to all other packages and modules. Directory Structure dot Notation ./einvoice einvoice There are two sub-packages called discovery and delivery. A third directory named \"docs\" is also at this level and contains project documentation. Directory Structure dot Notation ./einvoice einvoice ./einvoice/discovery einvoice.discovery ./einvoice/delivery einvoice.delivery ./einvoice/docs NA - does not contain code artifacts Third level directory contains the Python modules containing actual application code. Within the discovery directory there is a \"conf\" directory intended for application configuration work, a \"data\" directory for files and applications to generate test data and scenarios, and a \"tests\" directory which contains executable modules to test the files in their immediate parent directory. The delivery directory contains a single sub-directory called \"tests\" which also contains executable test files. Directory Structure dot Notation ./einvoice einvoice ./einvoice/discovery einvoice.discovery ./einvoice/delivery einvoice.delivery ./einvoice/docs NA - does not contain code artifacts ./einvoice/discovery/conf einvoice.discovery.conf ./einvoice/discovery/data einvoice.discovery.data ./einvoice/discovery/tests einvoice.discovery.tests ./einvoice/discovery/accessor.py, app_handler.py, app_logging.py, create_tracking_id.py, dns_query.py, einvoice_message_package.py, line_item.py, party_address.py, semantic_model.py, smp_query.py, urn_hasher.py, urn.py einvoice.discovery.accessor.Accessor, einvoice.discovery.app_logging.create_logger, etc. ./einvoice/delivery/import_xsd einvoice.delivery.import_xsd.ImportXSD ./einvoice/delivery/tests einvoice.delivery.tests Fourth level directories are the deepest in the application and contain code in the conf, data, and tests directories. Directory Structure dot Notation ./einvoice einvoice ./einvoice/discovery einvoice.discovery ./einvoice/delivery einvoice.delivery ./einvoice/docs NA - does not contain code artifacts ./einvoice/discovery/conf einvoice.discovery.conf ./einvoice/discovery/data einvoice.discovery.data ./einvoice/discovery/tests einvoice.discovery.tests ./einvoice/discovery/accessor.py, app_handler.py, app_logging.py, create_tracking_id.py, dns_query.py, einvoice_message_package.py, line_item.py, party_address.py, semantic_model.py, smp_query.py, urn_hasher.py, urn.py einvoice.discovery.accessor.Accessor, einvoice.discovery.app_logging.create_logger, etc. ./einvoice/delivery/import_xsd einvoice.delivery.import_xsd.ImportXSD ./einvoice/delivery/tests einvoice.delivery.tests ./einvoice/discovery/conf/config_tool.py, smp_config.py einvoice.discovery.conf.config_tool.EInvoiceConfig, etc. ./einvoice/discovery/data/create_sample_data.py einvoice.discovery.data.create_sample_data.CreateSampleData ./einvoice/discovery/tests/test_app_logging.py einvoice.discovery.tests.test_app_logging.test_log_creation ./einvoice/discovery/tests/test_app_logging.py einvoice.delivery.tests.test_app_logging.test_import_xsd Additional Files Additional files included in the Project which are important. File Purpose ./einvoice/delivery/app.log application log created by app_logging.py for delivery sub-package. ./einvoice/delivery/web_response.log Response logging to feed into a webservice for delivery sub-package. ./einvoice/discovery/app.log Application log created by app_logging.py for discovery sub-package. ./einvoice/discovery/web_response.log Response logging to feed into a webservice for discovery sub-package. ./einvoice/docs Markdown files compiled into the project documentation. ./einvoice/docs/jupyterlab Stored JupyterLab sandboxes which may be shared via Google Colab or downloaded and run on a Jupyter service instance. ./einvoice/docs/pdf Stored PDF files (entity diagrams) which may be included in the documentation. ./einvoice/docs/drawio Stored PDF files (vector graphic diagrams) which may be included in the documentation. ./einvoice/discovery/tests/ *.sh An assortment of shell scripts to run various linters on the modules. Includes pylint, mypy, flake8, pycodestyle, pydocstyle, and combinations. ./einvoice/discovery/data/item_list.csv, per_item_list.csv CSV files which contain same data values to populate an einvoice. .einvoice/.env .env.example.dev Configuration files which contain example values for testing purposes. ebms-header-3_20220119.xsd, sample_msg.xml XSD containing schema definition for for ebMS header and a sample message to test against it. Note on classes with modules. All module code is in classes and methods. All code in the discovery and delivery sub-packages is encapsulated in a class and a method within a class. There are no excutable functions outside of a class. There is no entry point to execute this code and instantiate any of the classes or methods at the commandline. Examples of implementing and executing the code can be found in the test cases , start-to-finish example , or the JupyterLab/Notebooks . Test cases are not encapsulated in classes or methods but are instead named functions. The code is as Pythonic as possible in naming files for exactly what they do. The functionality can be broken down as: Dataclasses - modules which define some of the key entities at use in the project. urn.py - Dataclass for a urn. semantic_model.py - Dataclass for the semantic model (the einvoice itself). party_addresss.py - Dataclass for a party entity within the Four-Corner model. line_item.py - Dataclass for a line item on the semantic model (einvoice). einvoice_message_package.py - Dataclass to contain all the information to be transmitted, i.e., the payload, in the einvoice message. Specific workflow actions - modules which execute specific tasks within the process workflow. urn_hasher.py - takes the inputs of the party_id, specification, and schema_id and creates the NAPTR look-up uri. dns_query.py - take the NAPTR look-up uri and execute it against DNS. The output is the SMP uri and the existing urn is passed forward as well. smp_query.py - receives the SMP uri and urn and creates two REST API calls to the endpoint based on the inputs. Executes the webservice calls and receives a response. Parses the response and returns it as a string containing the URI of corner 3 in the model. import_xsd.py - takes as an input an XML file and checks its validity against an XSD. In this case it is the XML of an ebMS message header checked against an AS4 conformance profile. Other \"helper\" modules - accessory.py - module to run the \"Start-To-Finish\" process, execute via test scripts. create_sample_data.py - construct sample data entities to use in testing the semantic model. create_tracking_id.py - create an arbitrary id with a given configuraiton to use to track the message through the process. Could be used in lieu of a UUID. app_handler.py - module closest to being an executable form the command line. A prototpye module to run the \"Start-to-Finish\" directly, if all required configuration is complete. app_logger.py - a custom logging implemenation to be used by all the other modules, including test modules, to standardize output and aggregate to single stream each for app logging, to system out, and response to a webservice. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The Modules"},{"location":"using_the_modules/#integrating-code-modules","text":"","title":"Integrating Code Modules"},{"location":"using_the_modules/#the-package-structure-and-using-the-modules","text":"How the package is organized. The top level of the packages is named \"einvoice.\" It is the parent to all other packages and modules. Directory Structure dot Notation ./einvoice einvoice There are two sub-packages called discovery and delivery. A third directory named \"docs\" is also at this level and contains project documentation. Directory Structure dot Notation ./einvoice einvoice ./einvoice/discovery einvoice.discovery ./einvoice/delivery einvoice.delivery ./einvoice/docs NA - does not contain code artifacts Third level directory contains the Python modules containing actual application code. Within the discovery directory there is a \"conf\" directory intended for application configuration work, a \"data\" directory for files and applications to generate test data and scenarios, and a \"tests\" directory which contains executable modules to test the files in their immediate parent directory. The delivery directory contains a single sub-directory called \"tests\" which also contains executable test files. Directory Structure dot Notation ./einvoice einvoice ./einvoice/discovery einvoice.discovery ./einvoice/delivery einvoice.delivery ./einvoice/docs NA - does not contain code artifacts ./einvoice/discovery/conf einvoice.discovery.conf ./einvoice/discovery/data einvoice.discovery.data ./einvoice/discovery/tests einvoice.discovery.tests ./einvoice/discovery/accessor.py, app_handler.py, app_logging.py, create_tracking_id.py, dns_query.py, einvoice_message_package.py, line_item.py, party_address.py, semantic_model.py, smp_query.py, urn_hasher.py, urn.py einvoice.discovery.accessor.Accessor, einvoice.discovery.app_logging.create_logger, etc. ./einvoice/delivery/import_xsd einvoice.delivery.import_xsd.ImportXSD ./einvoice/delivery/tests einvoice.delivery.tests Fourth level directories are the deepest in the application and contain code in the conf, data, and tests directories. Directory Structure dot Notation ./einvoice einvoice ./einvoice/discovery einvoice.discovery ./einvoice/delivery einvoice.delivery ./einvoice/docs NA - does not contain code artifacts ./einvoice/discovery/conf einvoice.discovery.conf ./einvoice/discovery/data einvoice.discovery.data ./einvoice/discovery/tests einvoice.discovery.tests ./einvoice/discovery/accessor.py, app_handler.py, app_logging.py, create_tracking_id.py, dns_query.py, einvoice_message_package.py, line_item.py, party_address.py, semantic_model.py, smp_query.py, urn_hasher.py, urn.py einvoice.discovery.accessor.Accessor, einvoice.discovery.app_logging.create_logger, etc. ./einvoice/delivery/import_xsd einvoice.delivery.import_xsd.ImportXSD ./einvoice/delivery/tests einvoice.delivery.tests ./einvoice/discovery/conf/config_tool.py, smp_config.py einvoice.discovery.conf.config_tool.EInvoiceConfig, etc. ./einvoice/discovery/data/create_sample_data.py einvoice.discovery.data.create_sample_data.CreateSampleData ./einvoice/discovery/tests/test_app_logging.py einvoice.discovery.tests.test_app_logging.test_log_creation ./einvoice/discovery/tests/test_app_logging.py einvoice.delivery.tests.test_app_logging.test_import_xsd","title":"The Package Structure and Using the Modules"},{"location":"using_the_modules/#additional-files","text":"Additional files included in the Project which are important. File Purpose ./einvoice/delivery/app.log application log created by app_logging.py for delivery sub-package. ./einvoice/delivery/web_response.log Response logging to feed into a webservice for delivery sub-package. ./einvoice/discovery/app.log Application log created by app_logging.py for discovery sub-package. ./einvoice/discovery/web_response.log Response logging to feed into a webservice for discovery sub-package. ./einvoice/docs Markdown files compiled into the project documentation. ./einvoice/docs/jupyterlab Stored JupyterLab sandboxes which may be shared via Google Colab or downloaded and run on a Jupyter service instance. ./einvoice/docs/pdf Stored PDF files (entity diagrams) which may be included in the documentation. ./einvoice/docs/drawio Stored PDF files (vector graphic diagrams) which may be included in the documentation. ./einvoice/discovery/tests/ *.sh An assortment of shell scripts to run various linters on the modules. Includes pylint, mypy, flake8, pycodestyle, pydocstyle, and combinations. ./einvoice/discovery/data/item_list.csv, per_item_list.csv CSV files which contain same data values to populate an einvoice. .einvoice/.env .env.example.dev Configuration files which contain example values for testing purposes. ebms-header-3_20220119.xsd, sample_msg.xml XSD containing schema definition for for ebMS header and a sample message to test against it.","title":"Additional Files"},{"location":"using_the_modules/#note-on-classes-with-modules","text":"All module code is in classes and methods. All code in the discovery and delivery sub-packages is encapsulated in a class and a method within a class. There are no excutable functions outside of a class. There is no entry point to execute this code and instantiate any of the classes or methods at the commandline. Examples of implementing and executing the code can be found in the test cases , start-to-finish example , or the JupyterLab/Notebooks . Test cases are not encapsulated in classes or methods but are instead named functions. The code is as Pythonic as possible in naming files for exactly what they do. The functionality can be broken down as: Dataclasses - modules which define some of the key entities at use in the project. urn.py - Dataclass for a urn. semantic_model.py - Dataclass for the semantic model (the einvoice itself). party_addresss.py - Dataclass for a party entity within the Four-Corner model. line_item.py - Dataclass for a line item on the semantic model (einvoice). einvoice_message_package.py - Dataclass to contain all the information to be transmitted, i.e., the payload, in the einvoice message. Specific workflow actions - modules which execute specific tasks within the process workflow. urn_hasher.py - takes the inputs of the party_id, specification, and schema_id and creates the NAPTR look-up uri. dns_query.py - take the NAPTR look-up uri and execute it against DNS. The output is the SMP uri and the existing urn is passed forward as well. smp_query.py - receives the SMP uri and urn and creates two REST API calls to the endpoint based on the inputs. Executes the webservice calls and receives a response. Parses the response and returns it as a string containing the URI of corner 3 in the model. import_xsd.py - takes as an input an XML file and checks its validity against an XSD. In this case it is the XML of an ebMS message header checked against an AS4 conformance profile. Other \"helper\" modules - accessory.py - module to run the \"Start-To-Finish\" process, execute via test scripts. create_sample_data.py - construct sample data entities to use in testing the semantic model. create_tracking_id.py - create an arbitrary id with a given configuraiton to use to track the message through the process. Could be used in lieu of a UUID. app_handler.py - module closest to being an executable form the command line. A prototpye module to run the \"Start-to-Finish\" directly, if all required configuration is complete. app_logger.py - a custom logging implemenation to be used by all the other modules, including test modules, to standardize output and aggregate to single stream each for app logging, to system out, and response to a webservice.","title":"Note on classes with modules."},{"location":"working_with_the_code/","text":"Getting the code. Pulling the code from GitHub The e-Invoice-Onbarding-Tool is a public repository. The code is freely available under an MIT Licene for individuals and organizations to pull, review, and modify as they chose in order to further their participation with the project. It is entirely possible to pull the code from github anonymously using a link from within the repo. Pulling the code from GitHub Look for the green \"Code\" button which will provide links to clone the code using https, ssh, the git desktop, or a zip file. This going to pull the repo at the root ./e-invoice-Onboarding-Toolkit. Open the folder as a project within your IDE or editor of choice. Those who would like to become more involved and want to do more than anonymously pull code can contribute by: Creating a GitHub account if one hasn't already been created. Installing the GitHub CLI or the GitHub desktop application Configuring the personal profile and ssh keys to securely submit code to the repository. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Getting the Code"},{"location":"working_with_the_code/#getting-the-code","text":"","title":"Getting the code."},{"location":"working_with_the_code/#pulling-the-code-from-github","text":"The e-Invoice-Onbarding-Tool is a public repository. The code is freely available under an MIT Licene for individuals and organizations to pull, review, and modify as they chose in order to further their participation with the project. It is entirely possible to pull the code from github anonymously using a link from within the repo. Pulling the code from GitHub Look for the green \"Code\" button which will provide links to clone the code using https, ssh, the git desktop, or a zip file. This going to pull the repo at the root ./e-invoice-Onboarding-Toolkit. Open the folder as a project within your IDE or editor of choice. Those who would like to become more involved and want to do more than anonymously pull code can contribute by: Creating a GitHub account if one hasn't already been created. Installing the GitHub CLI or the GitHub desktop application Configuring the personal profile and ssh keys to securely submit code to the repository.","title":"Pulling the code from GitHub"}]}