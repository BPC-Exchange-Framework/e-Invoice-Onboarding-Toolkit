{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the e-Invoice Onboarding Toolkit This is a repository for open source software tools created to facilitate market adoption of e-invoices implemented conformant with the Four-Corner interoperability model framework. For information about e-invoices and implementing the Four-Corner Model please visit the Business Payments Coalition website . Additional documentation, reference materials, and standards can be found on the Oasis-Open.org website . Start with the ebXML specification This project FAQ Index Getting Started Tools and Resources Configuring a Development Environment Package Requirements Working with the Code Using the Code Start-to-Finish Test Cases Google Colab Pages Package/Library API accessor.py app_logging.py create_tracking_id.py dns_query.py discovery_message_package.py line_item.py party_address.py semantic_model.py smp_query.py urn_handler.py urn_hasher.py urn.py Flask Integration on Docker Project Roadmap Enabling Infrastructure Components Todo Project Artifacts Workflow Oasis Documentation License No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"1. Index"},{"location":"#welcome-to-the-e-invoice-onboarding-toolkit","text":"This is a repository for open source software tools created to facilitate market adoption of e-invoices implemented conformant with the Four-Corner interoperability model framework. For information about e-invoices and implementing the Four-Corner Model please visit the Business Payments Coalition website . Additional documentation, reference materials, and standards can be found on the Oasis-Open.org website . Start with the ebXML specification","title":"Welcome to the e-Invoice Onboarding Toolkit"},{"location":"#this-project","text":"FAQ Index Getting Started Tools and Resources Configuring a Development Environment Package Requirements Working with the Code Using the Code Start-to-Finish Test Cases Google Colab Pages Package/Library API accessor.py app_logging.py create_tracking_id.py dns_query.py discovery_message_package.py line_item.py party_address.py semantic_model.py smp_query.py urn_handler.py urn_hasher.py urn.py Flask Integration on Docker Project Roadmap Enabling Infrastructure Components Todo Project Artifacts Workflow Oasis Documentation License","title":"This project"},{"location":"_license/","text":"MIT License Copyright (c) 2022 BPC Open Source Tools Project Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"14. License"},{"location":"_license/#mit-license","text":"Copyright (c) 2022 BPC Open Source Tools Project Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"accessor/","text":"e-invoice Onboarding Toolkit API ::: discovery.accessor handler: python selection: members: - init - call_hash - call_dns_lookup - call_smp_service_group_url - call_smp_service_url rendering: show_root_heading: true show_source: true <div style=\"font-size: 12px; padding: 15px; border: 2px solid lightgray; margin-top: 100px; margin-left: 0px; margin-bottom: 40px; margin-right: auto; width: 70%; border-radius: 10px;\"> <h4 style=\"font-size: 14px; padding: 0px; margin: 0px;\">No Representations or Warranties</h5> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </div>","title":"accessor.py"},{"location":"accessor/#e-invoice-onboarding-toolkit-api","text":"::: discovery.accessor handler: python selection: members: - init - call_hash - call_dns_lookup - call_smp_service_group_url - call_smp_service_url rendering: show_root_heading: true show_source: true <div style=\"font-size: 12px; padding: 15px; border: 2px solid lightgray; margin-top: 100px; margin-left: 0px; margin-bottom: 40px; margin-right: auto; width: 70%; border-radius: 10px;\"> <h4 style=\"font-size: 14px; padding: 0px; margin: 0px;\">No Representations or Warranties</h5> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </div>","title":"e-invoice Onboarding Toolkit API"},{"location":"app_logging/","text":"e-invoice Onboarding Toolkit API ::: dicovery.app_logging handler: python selection: members: - create_logger rendering: show_root_heading: false show_source: false <div style=\"font-size: 12px; padding: 15px; border: 2px solid lightgray; margin-top: 100px; margin-left: 0px; margin-bottom: 40px; margin-right: auto; width: 70%; border-radius: 10px;\"> <h4 style=\"font-size: 14px; padding: 0px; margin: 0px;\">No Representations or Warranties</h5> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </div>","title":"app_logging.py"},{"location":"app_logging/#e-invoice-onboarding-toolkit-api","text":"::: dicovery.app_logging handler: python selection: members: - create_logger rendering: show_root_heading: false show_source: false <div style=\"font-size: 12px; padding: 15px; border: 2px solid lightgray; margin-top: 100px; margin-left: 0px; margin-bottom: 40px; margin-right: auto; width: 70%; border-radius: 10px;\"> <h4 style=\"font-size: 14px; padding: 0px; margin: 0px;\">No Representations or Warranties</h5> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </div>","title":"e-invoice Onboarding Toolkit API"},{"location":"artifacts/","text":"The Repo(sitory) Repository Layout This project includes the following files, i.e., \"artifacts\" in .py , . md , . txt and other formats, updated as of: 02/07/2022 (February 7th, 2022) /e-Invoice-Onboarding-Toolkit . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u251c\u2500\u2500 einvoice \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 delivery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 import_xsd.py \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2514\u2500\u2500 tests \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 test_import_xsd.py \u2502 \u251c\u2500\u2500 discovery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 accessor.py \u2502 \u2502 \u251c\u2500\u2500 app_handler.py \u2502 \u2502 \u251c\u2500\u2500 app_logging.py \u2502 \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 config_tool.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 smp_config.py \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.py \u2502 \u2502 \u251c\u2500\u2500 data \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 item_list.csv \u2502 \u2502 \u2502 \u2514\u2500\u2500 per_item_list.csv \u2502 \u2502 \u251c\u2500\u2500 dns_query.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 ebms-header.xml \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.py \u2502 \u2502 \u251c\u2500\u2500 line_item.py \u2502 \u2502 \u251c\u2500\u2500 party_address.py \u2502 \u2502 \u251c\u2500\u2500 semantic_model.py \u2502 \u2502 \u251c\u2500\u2500 smp_query.py \u2502 \u2502 \u251c\u2500\u2500 tests \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ez_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 flake8_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 hardcore_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 magic_linter.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 mypy_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pycodestyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pydocstyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pylint_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_accessor.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_app_logging.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_tracking_id.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_dns_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_line_item.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_party_address.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_semantic_model.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_smp_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn_hasher.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 unaptr_response.json \u2502 \u2502 \u251c\u2500\u2500 urn.py \u2502 \u2502 \u2514\u2500\u2500 urn_hasher.py \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 _license.md \u2502 \u2502 \u251c\u2500\u2500 accessor.md \u2502 \u2502 \u251c\u2500\u2500 app_logging.md \u2502 \u2502 \u251c\u2500\u2500 artifacts.md \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.md \u2502 \u2502 \u251c\u2500\u2500 custom_theme \u2502 \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u2514\u2500\u2500 main.html \u2502 \u2502 \u251c\u2500\u2500 dns_query.md \u2502 \u2502 \u251c\u2500\u2500 drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.3.drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.drawio \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participant 1.1.drawio \u2502 \u2502 \u251c\u2500\u2500 einvoice_design.xlsx \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.md \u2502 \u2502 \u251c\u2500\u2500 enabling_infrastructure_components.md \u2502 \u2502 \u251c\u2500\u2500 faq.md \u2502 \u2502 \u251c\u2500\u2500 flask_integration_on_docker.md \u2502 \u2502 \u251c\u2500\u2500 getting_started.md \u2502 \u2502 \u251c\u2500\u2500 git_workflow.md \u2502 \u2502 \u251c\u2500\u2500 google_colab_pages.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u251c\u2500\u2500 jupyterlab \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4_v2.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 dns_query.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20210119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 naptr_lookup.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 python_dev.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2502 \u251c\u2500\u2500 tracking_id_sandbox.ipynb \u2502 \u2502 \u2502 \u2514\u2500\u2500 urn_hash_work.ipynb \u2502 \u2502 \u251c\u2500\u2500 line_item.md \u2502 \u2502 \u251c\u2500\u2500 oasis_documentation.md \u2502 \u2502 \u251c\u2500\u2500 party_address.md \u2502 \u2502 \u251c\u2500\u2500 pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.4.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.3.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Participant 1.1.pdf \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participants 1.2.pdf \u2502 \u2502 \u251c\u2500\u2500 project_roadmap.md \u2502 \u2502 \u251c\u2500\u2500 python_dev_env.md \u2502 \u2502 \u251c\u2500\u2500 requirements.md \u2502 \u2502 \u251c\u2500\u2500 semantic_model.md \u2502 \u2502 \u251c\u2500\u2500 smp_query.md \u2502 \u2502 \u251c\u2500\u2500 start_to_finish.md \u2502 \u2502 \u251c\u2500\u2500 test_cases.md \u2502 \u2502 \u251c\u2500\u2500 todo.md \u2502 \u2502 \u251c\u2500\u2500 tools_and_resources.md \u2502 \u2502 \u251c\u2500\u2500 urn.md \u2502 \u2502 \u251c\u2500\u2500 urn_handler.md \u2502 \u2502 \u251c\u2500\u2500 urn_hasher.md \u2502 \u2502 \u251c\u2500\u2500 using_the_modules.md \u2502 \u2502 \u2514\u2500\u2500 working_with_the_code.md \u2502 \u2514\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 todo.md 13 directories, 109 files No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"11. Project Artifacts"},{"location":"artifacts/#the-repository","text":"","title":"The Repo(sitory)"},{"location":"artifacts/#repository-layout","text":"This project includes the following files, i.e., \"artifacts\" in .py , . md , . txt and other formats, updated as of: 02/07/2022 (February 7th, 2022) /e-Invoice-Onboarding-Toolkit . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u251c\u2500\u2500 einvoice \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 delivery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 import_xsd.py \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2514\u2500\u2500 tests \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 test_import_xsd.py \u2502 \u251c\u2500\u2500 discovery \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 accessor.py \u2502 \u2502 \u251c\u2500\u2500 app_handler.py \u2502 \u2502 \u251c\u2500\u2500 app_logging.py \u2502 \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 config_tool.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 smp_config.py \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.py \u2502 \u2502 \u251c\u2500\u2500 data \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 item_list.csv \u2502 \u2502 \u2502 \u2514\u2500\u2500 per_item_list.csv \u2502 \u2502 \u251c\u2500\u2500 dns_query.py \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u251c\u2500\u2500 ebms-header.xml \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.py \u2502 \u2502 \u251c\u2500\u2500 line_item.py \u2502 \u2502 \u251c\u2500\u2500 party_address.py \u2502 \u2502 \u251c\u2500\u2500 semantic_model.py \u2502 \u2502 \u251c\u2500\u2500 smp_query.py \u2502 \u2502 \u251c\u2500\u2500 tests \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ez_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 flake8_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 hardcore_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 magic_linter.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 mypy_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pycodestyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pydocstyle_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 pylint_linter.sh \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_accessor.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_app_logging.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_sample_data.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_create_tracking_id.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_dns_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_line_item.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_party_address.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_semantic_model.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_smp_query.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 test_urn_hasher.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 unaptr_response.json \u2502 \u2502 \u251c\u2500\u2500 urn.py \u2502 \u2502 \u2514\u2500\u2500 urn_hasher.py \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 _license.md \u2502 \u2502 \u251c\u2500\u2500 accessor.md \u2502 \u2502 \u251c\u2500\u2500 app_logging.md \u2502 \u2502 \u251c\u2500\u2500 artifacts.md \u2502 \u2502 \u251c\u2500\u2500 create_tracking_id.md \u2502 \u2502 \u251c\u2500\u2500 custom_theme \u2502 \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u2514\u2500\u2500 main.html \u2502 \u2502 \u251c\u2500\u2500 dns_query.md \u2502 \u2502 \u251c\u2500\u2500 drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.3.drawio \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.drawio \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participant 1.1.drawio \u2502 \u2502 \u251c\u2500\u2500 einvoice_design.xlsx \u2502 \u2502 \u251c\u2500\u2500 einvoice_message_package.md \u2502 \u2502 \u251c\u2500\u2500 enabling_infrastructure_components.md \u2502 \u2502 \u251c\u2500\u2500 faq.md \u2502 \u2502 \u251c\u2500\u2500 flask_integration_on_docker.md \u2502 \u2502 \u251c\u2500\u2500 getting_started.md \u2502 \u2502 \u251c\u2500\u2500 git_workflow.md \u2502 \u2502 \u251c\u2500\u2500 google_colab_pages.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u251c\u2500\u2500 jupyterlab \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 Validate_bdx-as4_v2.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 dns_query.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20210119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 ebms-header-3_0-20220119.xsd \u2502 \u2502 \u2502 \u251c\u2500\u2500 naptr_lookup.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 python_dev.ipynb \u2502 \u2502 \u2502 \u251c\u2500\u2500 sample_msg.xml \u2502 \u2502 \u2502 \u251c\u2500\u2500 tracking_id_sandbox.ipynb \u2502 \u2502 \u2502 \u2514\u2500\u2500 urn_hash_work.ipynb \u2502 \u2502 \u251c\u2500\u2500 line_item.md \u2502 \u2502 \u251c\u2500\u2500 oasis_documentation.md \u2502 \u2502 \u251c\u2500\u2500 party_address.md \u2502 \u2502 \u251c\u2500\u2500 pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Entity Relationships 1.4.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.2.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Functional Capabilities 1.3.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 Bounded Context - Participant 1.1.pdf \u2502 \u2502 \u2502 \u2514\u2500\u2500 Bounded Context - Participants 1.2.pdf \u2502 \u2502 \u251c\u2500\u2500 project_roadmap.md \u2502 \u2502 \u251c\u2500\u2500 python_dev_env.md \u2502 \u2502 \u251c\u2500\u2500 requirements.md \u2502 \u2502 \u251c\u2500\u2500 semantic_model.md \u2502 \u2502 \u251c\u2500\u2500 smp_query.md \u2502 \u2502 \u251c\u2500\u2500 start_to_finish.md \u2502 \u2502 \u251c\u2500\u2500 test_cases.md \u2502 \u2502 \u251c\u2500\u2500 todo.md \u2502 \u2502 \u251c\u2500\u2500 tools_and_resources.md \u2502 \u2502 \u251c\u2500\u2500 urn.md \u2502 \u2502 \u251c\u2500\u2500 urn_handler.md \u2502 \u2502 \u251c\u2500\u2500 urn_hasher.md \u2502 \u2502 \u251c\u2500\u2500 using_the_modules.md \u2502 \u2502 \u2514\u2500\u2500 working_with_the_code.md \u2502 \u2514\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 todo.md 13 directories, 109 files","title":"Repository Layout"},{"location":"create_tracking_id/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"create_tracking_id.py"},{"location":"dns_query/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"dns_query.py"},{"location":"einvoice_message_package/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"discovery_message_package.py"},{"location":"enabling_infrastructure_components/","text":"Additional Infrastructure Build-out No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"9. Enabling Infrastructure Components"},{"location":"enabling_infrastructure_components/#additional-infrastructure-build-out","text":"","title":"Additional Infrastructure Build-out"},{"location":"faq/","text":"Questions... Q: Who is the audience for this project? A: This software is intended for those interested in participating as service endpoints in a Four-Corners Model framework. The code to implement in the repository is written in the Python programing language. Other toolsets to facilitate the initiative such as Markdown or Docker may also be incorporated where appropriate. Q: What do I need in order to use this code? A: Python 1. Some knowledge of Python 2. Python 3.6 or greater, recommended is 3.10 . Q: Does this code provide a full end-to-end solution to process an e-invoice? A: This code answers some very domain specific questions regarding e-invoice functionality in a Four-Corners Model framework. Specifically it's helpful with: 1. The hashing functionality to derive the urn for look-up in a DNS NAPTR record. 2. How to do the DNS NATPR lookup and extract the relevant SMP URI. 3. How to construct the two REST requests to an SMP server to retrieve a Corner 3 URI. 4. How to execute the REST requests to the SMP server. 5. How to extract the Corner 3 endpoint URI from the response from the SMP server. 6. Validating an e-Invoice ebXML message header for compliance with an AS4 conformance profile. Q: How do I use the code? A: There are a number of ways the code can be examined or worked with: 1. Start to finish example of the URI discovery process . 2. Test Cases which demonstrate functionality of the modules. 3. Jupyter Notebook sandbox environments at Google Colab Pages which isolate and demonstrate the code in a sandbox. 4. Package/Library API see the Index for links to the code API on the modules themselves. 5. Integration of an example discovery process implemented in a Flask application on a Docker container (forthcoming). No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"FAQ"},{"location":"faq/#questions","text":"Q: Who is the audience for this project? A: This software is intended for those interested in participating as service endpoints in a Four-Corners Model framework. The code to implement in the repository is written in the Python programing language. Other toolsets to facilitate the initiative such as Markdown or Docker may also be incorporated where appropriate. Q: What do I need in order to use this code? A: Python 1. Some knowledge of Python 2. Python 3.6 or greater, recommended is 3.10 . Q: Does this code provide a full end-to-end solution to process an e-invoice? A: This code answers some very domain specific questions regarding e-invoice functionality in a Four-Corners Model framework. Specifically it's helpful with: 1. The hashing functionality to derive the urn for look-up in a DNS NAPTR record. 2. How to do the DNS NATPR lookup and extract the relevant SMP URI. 3. How to construct the two REST requests to an SMP server to retrieve a Corner 3 URI. 4. How to execute the REST requests to the SMP server. 5. How to extract the Corner 3 endpoint URI from the response from the SMP server. 6. Validating an e-Invoice ebXML message header for compliance with an AS4 conformance profile. Q: How do I use the code? A: There are a number of ways the code can be examined or worked with: 1. Start to finish example of the URI discovery process . 2. Test Cases which demonstrate functionality of the modules. 3. Jupyter Notebook sandbox environments at Google Colab Pages which isolate and demonstrate the code in a sandbox. 4. Package/Library API see the Index for links to the code API on the modules themselves. 5. Integration of an example discovery process implemented in a Flask application on a Docker container (forthcoming).","title":"Questions..."},{"location":"flask_integration_on_docker/","text":"Flask Integration, Docker, etc. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"7f. Flask Integration on Docker"},{"location":"flask_integration_on_docker/#flask-integration-docker-etc","text":"","title":"Flask Integration, Docker, etc."},{"location":"getting_started/","text":"Diving in to the E-Invoice On-boarding Toolkit About This project offers examples of Python code written to interact with an access point or discovery service of a 4-Corners Payment Model (\"Model\"). See the the Business Payments Coalition website for more information and fuller explanation of the Model. Assumptions The 4-Corners Model The software included with the project assumes a baseline understanding of the Model. Python A baseline knowledge of Python and programming are implicit in coming to github.com to pull code down to review and implement. This wiki and additional documentation are intended to further outline how the software in the Toolkit is designed to implement the Model. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"2. Getting Started"},{"location":"getting_started/#diving-in-to-the-e-invoice-on-boarding-toolkit","text":"","title":"Diving in to the E-Invoice On-boarding Toolkit"},{"location":"getting_started/#about","text":"This project offers examples of Python code written to interact with an access point or discovery service of a 4-Corners Payment Model (\"Model\"). See the the Business Payments Coalition website for more information and fuller explanation of the Model.","title":"About"},{"location":"getting_started/#assumptions","text":"","title":"Assumptions"},{"location":"getting_started/#the-4-corners-model","text":"The software included with the project assumes a baseline understanding of the Model.","title":"The 4-Corners Model"},{"location":"getting_started/#python","text":"A baseline knowledge of Python and programming are implicit in coming to github.com to pull code down to review and implement. This wiki and additional documentation are intended to further outline how the software in the Toolkit is designed to implement the Model.","title":"Python"},{"location":"git_workflow/","text":"Sample git workflow A minimal git \"script\" to work with the code. This is a sample workflow of a very rudimentary process to create a branch in Github, add code, and push up to the repo on Github. Create a new branch: git checkout -b <insert branch name here`> Implement your changes Add into the repo: git add . git commit -m <your comment here> git push :pushes your changes up to the remote branch Either create a pull request in Github, or: git checkout main git merge <branch you want to merge here> git push to push main changes up to remote branch No Representations or Warranties This software is free and Open Source offered under an MIT license. The developers of the software make no representations or warranties as to the software or its fitness for a particular purpose. This code is meant for educational and research purposes only. The code is offered \"as-is\" and is not intended to be used in a production environment. It is intended for developers of software related to the 4-corners Model to use as a stepping-off point for further development efforts.","title":"12. Workflow"},{"location":"git_workflow/#sample-git-workflow","text":"","title":"Sample git workflow"},{"location":"git_workflow/#a-minimal-git-script-to-work-with-the-code","text":"This is a sample workflow of a very rudimentary process to create a branch in Github, add code, and push up to the repo on Github. Create a new branch: git checkout -b <insert branch name here`> Implement your changes Add into the repo: git add . git commit -m <your comment here> git push :pushes your changes up to the remote branch Either create a pull request in Github, or: git checkout main git merge <branch you want to merge here> git push to push main changes up to remote branch","title":"A minimal git \"script\" to work with the code."},{"location":"google_colab_pages/","text":"Jupyter Notebooks on Google Colab Colab Sandboxes Google Colab pages which implement Jupyter Notebook have been created as sandboxes to demonstrate implementation of the code without deploying a development or virtual environment. urn creation, hashing, and naptr query to SML Colab page with examples of how to hash the specification, the schema_id, and the party_id to create the urn and perform the natpr dns query is at this Colab page . Examples 6, 7, 8, and 9 run the hash and submit against DNS in real-time. SMP query Colab page with examples of how to transform the urn and party_id and submit it to the SMP uri is at this Colab page . No Representations or Warranties This software is free and Open Source offered under an MIT license. The developers of the software make no representations or warranties as to the software or its fitness for a particular purpose. This code is meant for educational and research purposes only. The code is offered \"as-is\" and is not intended to be used in a production environment. It is intended for developers of software related to the 4-corners Model to use as a stepping-off point for further development efforts.","title":"7d. Google Colab Pages"},{"location":"google_colab_pages/#jupyter-notebooks-on-google-colab","text":"","title":"Jupyter Notebooks on Google Colab"},{"location":"google_colab_pages/#colab-sandboxes","text":"Google Colab pages which implement Jupyter Notebook have been created as sandboxes to demonstrate implementation of the code without deploying a development or virtual environment.","title":"Colab Sandboxes"},{"location":"google_colab_pages/#urn-creation-hashing-and-naptr-query-to-sml","text":"Colab page with examples of how to hash the specification, the schema_id, and the party_id to create the urn and perform the natpr dns query is at this Colab page . Examples 6, 7, 8, and 9 run the hash and submit against DNS in real-time.","title":"urn creation, hashing, and naptr query to SML"},{"location":"google_colab_pages/#smp-query","text":"Colab page with examples of how to transform the urn and party_id and submit it to the SMP uri is at this Colab page .","title":"SMP query"},{"location":"line_item/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"line_item.py"},{"location":"oasis_documentation/","text":"The documents referenced are: Documents OASIS ebXML Messaging Services Version 3.0: Part1, Core Features OASIS Standard, October 1, 2007, has: OASIS ebXML Messaging Services Version 3.0: Part 2, Advanced Features dated June 30, 2010 with Normative Reference of: ebXML Messaging Services Version 3.0: Part 2, Advanced Features which is referenced by the following three namespace URIs. OASIS ebXML Messaging Services 3.0 Conformance Profiles , Committee Specification 1, dated April 24, 2010 references the same namespace URI of http://docs.oasis-open.org/ebxml-msg/ns/ebms/v3.0/profiles/200707. AS4 Profile of ebMS 3.0 Version 1.0 dated January 23, 2013. XSD Files XSD File : ebms-header-3_0-200704 including snippets of sample XML and full SOAP for message headers. Note that the Namespace URI identified in Part1 is incorrect and returns an error message. XSD File : XSD for Routing Input reference parameter XSD File : MessageFragment XSD XSD File : Refactored Core Messaging XSD Namespaces Namespace URI : ebXML Messaging Services Version 3.0 Core Features) and references: Namespace URI : ebXML Messaging V3 Part 2: Multihop Routing Namespace URI : ebXML Messaging V3 Part 2: Message Fragments Namespace URI : Resource Directory Description Language(RDDL) 2.0 and references the XSD files below. Interoperable components under the AS4 Usage Agreements as specified in Section 5.2 of the AS4 Profile of ebMS are non-normative. (Excepting that the new AS4 Interoperabilty Profile for Four Corners Networks does attempt to make interoperation normative via P-Mode configuration.) Samples of SOAP including XML/XMLNS and XSLT are included in Appendix A of the AS4 Profile. There should be a namespace URI for the committee specfifcation called https://docs.oasis-open.org/bdxr/ns/bdx-as4/v1.0/profiles/202112. This is inferred from the ebXML Messaging V3 (ebMS3) namespace at http://docs.oasis-open.org/ebxml-msg/ns/ebms/v3.0/profiles/200707. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"13. OASIS Documentation"},{"location":"party_address/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"party_address.py"},{"location":"project_roadmap/","text":"Discovery #1 - SML NAPTR DNS Lookup Feature \u2013 Access Point A sends UNAPTR DNS query with a Party ID/Party ID Schema hash and obtains a valid response with connection information to the SMP. Action Actor Scoped? Generate the request to Access Point A, which includes Party ID, Party ID Schema, Invoice Data Seller No Transform and format contents of Seller\u2019s request to create UNAPTR DNS query. Access Point A Yes Query DNS. Access Point A Yes Return response to query. SML \u2013 Reply from UNAPTR DNS query. No Receive query response from DNS, which is the URI to the SMP Access Point A Yes Discovery #2 - SMP REST API Query Feature \u2013Access Point A sends a REST API query to the SMP URI to obtain a valid response with connection info of target Access Point and customers invoice capabilities. Action Actor Scoped? Send response with SMP URI to Access Point. SML No (not in this feature) Create REST query to service provider to obtain buyer\u2019s service capabilities. Access Point A Yes Send REST query to service provider to obtain participant\u2019s service capabilities. Access Point A Yes Receive query and send response with Sellers Capabilities and route to endpoint. SMP No Receive response to query of participant\u2019s capabilities. Access Point A Yes Delivery - AS4 Message Exchange Feature \u2013 An invoice with a semantically correct format is delivered using AS4 protocol. Action Actor Scoped? Compose semantically correct e-Invoice based on response from service provider about participant\u2019s capabilities. Access Point A Yes Format e-Invoice in compliant AS4 format. Access Point A Yes Send e-Invoice to final destination obtained from SMP service provider. Access Point A Yes Receives the request. Access Point B No No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"8. Project Roadmap"},{"location":"project_roadmap/#discovery-1-sml-naptr-dns-lookup","text":"Feature \u2013 Access Point A sends UNAPTR DNS query with a Party ID/Party ID Schema hash and obtains a valid response with connection information to the SMP. Action Actor Scoped? Generate the request to Access Point A, which includes Party ID, Party ID Schema, Invoice Data Seller No Transform and format contents of Seller\u2019s request to create UNAPTR DNS query. Access Point A Yes Query DNS. Access Point A Yes Return response to query. SML \u2013 Reply from UNAPTR DNS query. No Receive query response from DNS, which is the URI to the SMP Access Point A Yes","title":"Discovery #1 - SML NAPTR DNS Lookup"},{"location":"project_roadmap/#discovery-2-smp-rest-api-query","text":"Feature \u2013Access Point A sends a REST API query to the SMP URI to obtain a valid response with connection info of target Access Point and customers invoice capabilities. Action Actor Scoped? Send response with SMP URI to Access Point. SML No (not in this feature) Create REST query to service provider to obtain buyer\u2019s service capabilities. Access Point A Yes Send REST query to service provider to obtain participant\u2019s service capabilities. Access Point A Yes Receive query and send response with Sellers Capabilities and route to endpoint. SMP No Receive response to query of participant\u2019s capabilities. Access Point A Yes","title":"Discovery #2 - SMP REST API Query"},{"location":"project_roadmap/#delivery-as4-message-exchange","text":"Feature \u2013 An invoice with a semantically correct format is delivered using AS4 protocol. Action Actor Scoped? Compose semantically correct e-Invoice based on response from service provider about participant\u2019s capabilities. Access Point A Yes Format e-Invoice in compliant AS4 format. Access Point A Yes Send e-Invoice to final destination obtained from SMP service provider. Access Point A Yes Receives the request. Access Point B No","title":"Delivery - AS4 Message Exchange"},{"location":"python_dev_env/","text":"Install and Config of a Python Dev Env This document outlines the creation of a Python Development Environment consistent with Python standards and best practices and appropriate as a starting point for professional software development with Python. Important items for consideration include: - Installation of Python - Use of virtual environments for project and application segmentation. - Bringing in the required tools sets for: - Style checking against PEP8 - Automated code checking using flake8 and tox - Includng documentation using Sphinx and reStructuredText. - Including Docker and flask - Incorporating Test Drive Development as a matter of practice. - Logging - Editors and other IDEs - Links to additional resources. Note: This documentation assumes running on MacOS. All tools should be available in Windows and various flavors of Linux. Your mileage may vary. Install Homebrew using command: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Then install Python. brew install python Install other tools you may need or want using Homebrew. These will make life easier. brew install --cask visual-studio-code brew install node brew install r brew install rstudio brew install typescript brew install docker brew install --cask powershell Upgrade pip to latest version right OOB. (Note this is done using the Python3/pip3 call to avoid conflict with OS installed version of Python.) pip3 install --upgrade pip The pip update can also be doing using a call to Python itself, but the python3 install! python3 -m pip install --upgrade pip Get a list of what's been installed in a \"clean\" install of Python. pip3 list Package Version ---------------- ---------- appdirs 1.4.4 certifi 2020.12.5 distlib 0.3.1 filelock 3.0.12 pip 21.1.2 pipenv 2020.11.15 setuptools 56.0.0 six 1.16.0 virtualenv 20.4.6 virtualenv-clone 0.5.4 Create a virtual environment to use for Dev Creating virtual environments to use in Python programming can be done entirely with a packages that comes in the Pthyon install. There are other tool-sets such as Anaconda which provide a full set of development tools and frameworks to pick from, and include the ability to create and manage Python virtual environments with its Conda virtual environment manager. There are other additional packages for Python such as pyenv , and pipenv which can be installed separately. The example of shown offers one way to create the virtual environments which comes OOB in the Python install and offers a lot of manual control over the packages installed in the virtual environments themselves. Step Command What it's doing/output 1. cd Change to user home dir 2. pwd Print the working directory /Users/kelly 3. mkdir ./Dev ./Dev/virtualenvs Create working directories 4. cd ./Dev/virtualenvs Change into the working directory 5. pwd Print the working directory /Users/kelly/Dev/virtualenvs 6. virtualenv --python python3.9 e-Invoice Create the e-Invoice virtual environment 7. ls -l list contents of current directory structure drwxr-xr-x 7 kelly staff 224 Jun 15 08:52 e-Invoice 8. cd ./e-Invoice Change into the e-Invoice directory 9. cd ../bin Change into the bin directory 10. source ./activate source the activate file and make the current virtual environment active. 11. python -m pip install --upgrade pip update version of pip 12. pip list List the installed packages for this virtual env. This will be a very small list to start as this is a clean virtual env, including pip , setuptools , and wheel . Additional packages or modules to be installed in e-Invoice include: Docker, flask, requests Add support for Style and Code checking and Unit Testing. The Python package pep8 can be installed to do style checking consistent to PEP 8 -- Style Guide for Python Code . pip install pep8 Run your code against it in the following manner: pep8 <filename> e.g., pep8 hello.py then the output from the cosole using: echo $? Another module, flake8, checks for code style and errors simultanepously. There are a number of custom plug-ins to focus on various aspects of code validation. pip install flake8 The tox tool can be used to manage dependencies in virtual environments and Unit Test. pip install tox Docker and flask This project utilize Docker and flask . For support of Docker development on the Mac, use Homebrew as outlined above to install Docker locally. If necessary to issue Docker commands or use the Docker API from with Python, include the Docker package in the virtual environment. pip install docker Install the flask framework using pip as well. pip install flask Include Documentation To incorporate documentation into the application at every step, bring in the Sphinx package. pip install sphinx Then run sphix-quickstart in your project's top-level directory. Sphinx uses reStructured Text as a form of Markdown. For a brief overview see A ReStructuredText Primer or Quick reStructuredText . Additonal support documenting the project may include utilzing a resource like Read the Docs . See also: PEP-257 Docstring Conventions Test Driven Development Incorporate Test-Driven Development methodologies. Create the test scenarios before the actual coding. Primary source material for review can be found at obeythetestinggoat.com Text Editors and IDEs There are numerous tools for text editing and softwre development. Personal preference, specialization versus generalization, and cost may all play a part in choice of tools used for development. Here is a short list of well known and supported tools available for free or under an Open Source license. (No compensation is\u00df received for any reference to materials on this page.) - Visual Studio Code by Microsoft. \"Built on Open Source\" the Code version is free and has many plug-ins. It's a mature IDE with the polish of a Microsoft product. Not the behemouth of the full Visual Studio IDE. Available for Windows/Mac/Linux. There is a version of Visual Studio Code compiled with all the non-Open Source components removed called VSCodium . Or compile it from source available at GitHub resulting in a product called Code - OSS . - Atom Text Editor . A highly customizable text editor which is programming language agnostic and completely open source and available (packaged and source) on GitHub. Available for Windows/Mac/Linux. - PyCharm Community Edition by JetBrains. A Python specific IDE. The Community Edition is Free and Open Source, albeit with some limited functionality. Available for Windows/Mac/Linux. (Optional) Install Jupyter lab and notebooks.Jupyter notebooks (deprecated in favor of JupyterLab, though the notebook format remains the same) are especially popular for use in Data Science and ML. Runs locally on a Python framework. They are used to create documentation in Markdown and write and execute code that might not require an entire program. Supports other languages such as R and Julia. Can also be installed through Anaconda. cd /Users/kelly/Dev/virtualenvs virtualenv --python python3.9 jupiter python -m pip install --upgrade pip pip install jupyter pip install jupyterlab Start jupyterlab by running it from within your Python virtualenv /bin directory. At runtime, point it to the location of your GITHub root, e.g., ./jupyter-lab --notebook-dir /Users/kelly/GitHub Additional Resources There is a wealth of high quality documentation and writing about Python in digital and paper print and on the web in addition to that directly refered to above. As a starting point, see the following materials. (Again, no compensation is received for any reference to materials on this page.) - The Hitchhiker's Guide to Python by Kenneth Reitz and Tanya Schlusser. - Serious Python by Julien Danjoy - Guiding Design Principles from the Scientific Python Cookiecutter . - Python Doc - the official Python web site page of references to more documentation. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"4. Configuring a Development Environment"},{"location":"python_dev_env/#install-and-config-of-a-python-dev-env","text":"This document outlines the creation of a Python Development Environment consistent with Python standards and best practices and appropriate as a starting point for professional software development with Python. Important items for consideration include: - Installation of Python - Use of virtual environments for project and application segmentation. - Bringing in the required tools sets for: - Style checking against PEP8 - Automated code checking using flake8 and tox - Includng documentation using Sphinx and reStructuredText. - Including Docker and flask - Incorporating Test Drive Development as a matter of practice. - Logging - Editors and other IDEs - Links to additional resources. Note: This documentation assumes running on MacOS. All tools should be available in Windows and various flavors of Linux. Your mileage may vary. Install Homebrew using command: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Then install Python. brew install python Install other tools you may need or want using Homebrew. These will make life easier. brew install --cask visual-studio-code brew install node brew install r brew install rstudio brew install typescript brew install docker brew install --cask powershell Upgrade pip to latest version right OOB. (Note this is done using the Python3/pip3 call to avoid conflict with OS installed version of Python.) pip3 install --upgrade pip The pip update can also be doing using a call to Python itself, but the python3 install! python3 -m pip install --upgrade pip Get a list of what's been installed in a \"clean\" install of Python. pip3 list Package Version ---------------- ---------- appdirs 1.4.4 certifi 2020.12.5 distlib 0.3.1 filelock 3.0.12 pip 21.1.2 pipenv 2020.11.15 setuptools 56.0.0 six 1.16.0 virtualenv 20.4.6 virtualenv-clone 0.5.4","title":"Install and Config of a Python Dev Env"},{"location":"python_dev_env/#create-a-virtual-environment-to-use-for-dev","text":"Creating virtual environments to use in Python programming can be done entirely with a packages that comes in the Pthyon install. There are other tool-sets such as Anaconda which provide a full set of development tools and frameworks to pick from, and include the ability to create and manage Python virtual environments with its Conda virtual environment manager. There are other additional packages for Python such as pyenv , and pipenv which can be installed separately. The example of shown offers one way to create the virtual environments which comes OOB in the Python install and offers a lot of manual control over the packages installed in the virtual environments themselves. Step Command What it's doing/output 1. cd Change to user home dir 2. pwd Print the working directory /Users/kelly 3. mkdir ./Dev ./Dev/virtualenvs Create working directories 4. cd ./Dev/virtualenvs Change into the working directory 5. pwd Print the working directory /Users/kelly/Dev/virtualenvs 6. virtualenv --python python3.9 e-Invoice Create the e-Invoice virtual environment 7. ls -l list contents of current directory structure drwxr-xr-x 7 kelly staff 224 Jun 15 08:52 e-Invoice 8. cd ./e-Invoice Change into the e-Invoice directory 9. cd ../bin Change into the bin directory 10. source ./activate source the activate file and make the current virtual environment active. 11. python -m pip install --upgrade pip update version of pip 12. pip list List the installed packages for this virtual env. This will be a very small list to start as this is a clean virtual env, including pip , setuptools , and wheel . Additional packages or modules to be installed in e-Invoice include: Docker, flask, requests","title":"Create a virtual environment to use for Dev"},{"location":"python_dev_env/#add-support-for-style-and-code-checking-and-unit-testing","text":"The Python package pep8 can be installed to do style checking consistent to PEP 8 -- Style Guide for Python Code . pip install pep8 Run your code against it in the following manner: pep8 <filename> e.g., pep8 hello.py then the output from the cosole using: echo $? Another module, flake8, checks for code style and errors simultanepously. There are a number of custom plug-ins to focus on various aspects of code validation. pip install flake8 The tox tool can be used to manage dependencies in virtual environments and Unit Test. pip install tox","title":"Add support for Style and Code checking and Unit Testing."},{"location":"python_dev_env/#docker-and-flask","text":"This project utilize Docker and flask . For support of Docker development on the Mac, use Homebrew as outlined above to install Docker locally. If necessary to issue Docker commands or use the Docker API from with Python, include the Docker package in the virtual environment. pip install docker Install the flask framework using pip as well. pip install flask","title":"Docker and flask"},{"location":"python_dev_env/#include-documentation","text":"To incorporate documentation into the application at every step, bring in the Sphinx package. pip install sphinx Then run sphix-quickstart in your project's top-level directory. Sphinx uses reStructured Text as a form of Markdown. For a brief overview see A ReStructuredText Primer or Quick reStructuredText . Additonal support documenting the project may include utilzing a resource like Read the Docs . See also: PEP-257 Docstring Conventions","title":"Include Documentation"},{"location":"python_dev_env/#test-driven-development","text":"Incorporate Test-Driven Development methodologies. Create the test scenarios before the actual coding. Primary source material for review can be found at obeythetestinggoat.com","title":"Test Driven Development"},{"location":"python_dev_env/#text-editors-and-ides","text":"There are numerous tools for text editing and softwre development. Personal preference, specialization versus generalization, and cost may all play a part in choice of tools used for development. Here is a short list of well known and supported tools available for free or under an Open Source license. (No compensation is\u00df received for any reference to materials on this page.) - Visual Studio Code by Microsoft. \"Built on Open Source\" the Code version is free and has many plug-ins. It's a mature IDE with the polish of a Microsoft product. Not the behemouth of the full Visual Studio IDE. Available for Windows/Mac/Linux. There is a version of Visual Studio Code compiled with all the non-Open Source components removed called VSCodium . Or compile it from source available at GitHub resulting in a product called Code - OSS . - Atom Text Editor . A highly customizable text editor which is programming language agnostic and completely open source and available (packaged and source) on GitHub. Available for Windows/Mac/Linux. - PyCharm Community Edition by JetBrains. A Python specific IDE. The Community Edition is Free and Open Source, albeit with some limited functionality. Available for Windows/Mac/Linux. (Optional) Install Jupyter lab and notebooks.Jupyter notebooks (deprecated in favor of JupyterLab, though the notebook format remains the same) are especially popular for use in Data Science and ML. Runs locally on a Python framework. They are used to create documentation in Markdown and write and execute code that might not require an entire program. Supports other languages such as R and Julia. Can also be installed through Anaconda. cd /Users/kelly/Dev/virtualenvs virtualenv --python python3.9 jupiter python -m pip install --upgrade pip pip install jupyter pip install jupyterlab Start jupyterlab by running it from within your Python virtualenv /bin directory. At runtime, point it to the location of your GITHub root, e.g., ./jupyter-lab --notebook-dir /Users/kelly/GitHub","title":"Text Editors and IDEs"},{"location":"python_dev_env/#additional-resources","text":"There is a wealth of high quality documentation and writing about Python in digital and paper print and on the web in addition to that directly refered to above. As a starting point, see the following materials. (Again, no compensation is received for any reference to materials on this page.) - The Hitchhiker's Guide to Python by Kenneth Reitz and Tanya Schlusser. - Serious Python by Julien Danjoy - Guiding Design Principles from the Scientific Python Cookiecutter . - Python Doc - the official Python web site page of references to more documentation.","title":"Additional Resources"},{"location":"requirements/","text":"Currently implemented packages: This project utilizes the following packages, all of which should be available under an Open Source license via Py . List updated as of: 02/07/2022 (February 7th, 2022) Implement the packages in bold and most of the others should be brought along with. Make sure to source the virtual environment first and then ' pip | conda install ' to bring in the package. alabaster argh astroid attrs Babel brotlipy certifi cffi charset-normalizer click colorama cryptography dnspython docutils elementpath Faker flake8 future ghp-import idna imagesize importlib-metadata iniconfig isort Jinja2 joblib lazy-object-proxy livereload lunr Markdown MarkupSafe mccabe mergedeep mkdocs mkdocs-autorefs mkdocs-bootstrap mkdocs-material mkdocs-material-extensions mkdocstrings mypy mypy-extensions nltk packaging platformdirs pluggy psutil py pycodestyle pycparser pydocstyle pyflakes Pygments pylint pymdown-extensions pyOpenSSL pyparsing PySocks pytest python-dateutil python-dotenv pytkdocs pytz PyYAML pyyaml_env_tag regex requests six snowballstemmer Sphinx sphinxcontrib-applehelp sphinxcontrib-devhelp sphinxcontrib-htmlhelp sphinxcontrib-jsmath sphinxcontrib-qthelp sphinxcontrib-serializinghtml text-unidecode toml tomli tornado tqdm typing_extensions urllib3 watchdog wrapt xmlschema zipp No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"5. Package Requirements"},{"location":"semantic_model/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"semantic_model.py"},{"location":"smp_query/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"smp_query.py"},{"location":"start_to_finish/","text":"e-Invoice Onboarding Tool-kit Start-to-Finish Integration No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"7b. Start-to-Finish"},{"location":"start_to_finish/#e-invoice-onboarding-tool-kit","text":"","title":"e-Invoice Onboarding Tool-kit"},{"location":"start_to_finish/#start-to-finish-integration","text":"","title":"Start-to-Finish Integration"},{"location":"test_cases/","text":"Integrating Test Cases Test Cases No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"7c. Test Cases"},{"location":"test_cases/#integrating-test-cases","text":"","title":"Integrating Test Cases"},{"location":"test_cases/#test-cases","text":"","title":"Test Cases"},{"location":"todo/","text":"To do: List of Deliverables A deployment package which includes Python code to: Create dataclass object comprised of specification, schema ID, party ID, and a sample JSON e-Invoice payload. Construct the URN from the specification, schema ID, and party ID, Hash the URN per the requirements to create a NAPTR record for a DNS look-up to obtain SMP service URI. Do the DNS look-up to obtain the SMP service URI. Query the SMP URI using the ebXML spec. Test cases implemented using Test Driven Development Create a sample e-Invoice dataclass. Logging implemented through custom logging using standard Python modules. (In-progress) Containerized web API/UI to implement the code/functionality above. Provided as a Docker image. (In-progress)_ Creation of \"final\" Python package which delivers code artifacts as a library. Documentation and code artifacts for Infrastructure components: Demonstrating implementation of DNS infrastructure using Amazon Route53 and code to provision, update, and delete NATPR records, acting as the SML. Demonstrating implementation of SMP infrastructure to reply to the REST API for service functionally and AS4 final endpoint. Documentation (In-progress) Generated from FastAPI or Flask (In-progress) Generated from python docstring using Sphinx Previously created documentation and diagrams which were outcomes of analysis and process review. Jupyter Lab Notebooks running on Google Colab for real-time examples of a dev sandbox. Hash URN Notebook (Hash URN and SML query are in the same Notebook) SML query Notebook (Hash URN and SML query are in the same Notebook) SMP query Notebook Implementation Guide written by SEs and prepared with BSAs to facilitate utilization of the code and work product to be delivered via readthedocs.org site. ~~readthedocs.org site registration/creation~~ (In-progress) Create list of assumptions for starting point/baseline. Aggregation of above referenced artifacts. Documentation of supporting infrastructure including DNS and SMP provisioning specifically called out as a parallel value-add result of the project. Notes : Test drive development methodology is being implemented to include test cases for code as it is being developed and delivered. CI/CD process implemented via Github workflow has been validated to ensure PEP8 code standards and checks using Flake8, pylint, and pytest are valid. All changes and updates to code must pass CI/CD before it's merged into the repo. Certificate work has been determined to be out of scope at this time and has been removed from the e-Invoice Onboarding Toolkit repository. @mnkellyk will host this content under their personal repo available pursuant to a GPL3 license for use by anyone who may have an interest or benefit from it. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"10. Todo"},{"location":"todo/#to-do","text":"","title":"To do:"},{"location":"todo/#list-of-deliverables","text":"A deployment package which includes Python code to: Create dataclass object comprised of specification, schema ID, party ID, and a sample JSON e-Invoice payload. Construct the URN from the specification, schema ID, and party ID, Hash the URN per the requirements to create a NAPTR record for a DNS look-up to obtain SMP service URI. Do the DNS look-up to obtain the SMP service URI. Query the SMP URI using the ebXML spec. Test cases implemented using Test Driven Development Create a sample e-Invoice dataclass. Logging implemented through custom logging using standard Python modules. (In-progress) Containerized web API/UI to implement the code/functionality above. Provided as a Docker image. (In-progress)_ Creation of \"final\" Python package which delivers code artifacts as a library. Documentation and code artifacts for Infrastructure components: Demonstrating implementation of DNS infrastructure using Amazon Route53 and code to provision, update, and delete NATPR records, acting as the SML. Demonstrating implementation of SMP infrastructure to reply to the REST API for service functionally and AS4 final endpoint. Documentation (In-progress) Generated from FastAPI or Flask (In-progress) Generated from python docstring using Sphinx Previously created documentation and diagrams which were outcomes of analysis and process review. Jupyter Lab Notebooks running on Google Colab for real-time examples of a dev sandbox. Hash URN Notebook (Hash URN and SML query are in the same Notebook) SML query Notebook (Hash URN and SML query are in the same Notebook) SMP query Notebook Implementation Guide written by SEs and prepared with BSAs to facilitate utilization of the code and work product to be delivered via readthedocs.org site. ~~readthedocs.org site registration/creation~~ (In-progress) Create list of assumptions for starting point/baseline. Aggregation of above referenced artifacts. Documentation of supporting infrastructure including DNS and SMP provisioning specifically called out as a parallel value-add result of the project. Notes : Test drive development methodology is being implemented to include test cases for code as it is being developed and delivered. CI/CD process implemented via Github workflow has been validated to ensure PEP8 code standards and checks using Flake8, pylint, and pytest are valid. All changes and updates to code must pass CI/CD before it's merged into the repo. Certificate work has been determined to be out of scope at this time and has been removed from the e-Invoice Onboarding Toolkit repository. @mnkellyk will host this content under their personal repo available pursuant to a GPL3 license for use by anyone who may have an interest or benefit from it.","title":"List of Deliverables"},{"location":"tools_and_resources/","text":"Getting started The goal is to create, test, deploy, and maintain code to the highest professional standards. To do that we need to agree on a set of tools and practices to enable repeatable and reproducible code. Cheat Sheet The Basics The Details Programming Language Python 3.6 or above. Computer Supports runnng Python 3.6 or above. OS Mac, Windows, or Windows w/WSL2. Documents and resources. GitHub and BPC-Technical-Workgroup-Folder - Google Drive Programming Languages The initial development of the project is being done in Python. Additional development in Go and adoption and implementation of cloud methodologies utilizing Amazon Web Services are considered stretch goals within the scope of the Project. All effort will be made to remain within the Python Standard Library . Inclusion of other well known packages with an open source license is acceptable if necessary. Version of Python Select a minimum version of Python 3.6. This will include newer features such as f-string. Computer Spec You will need a computer which is able to download and run Python 3.6. Operating System Mac Windows Windows w/WSL2 Linux Additional Configuration and Environment Considerations Consideration and implementation of additional Python enabling technology includes: Frameworks: Django Flask FastAPI OpenAPI AWS Lambdas Containerization and Cloud Services: Docker Running on a cloud service such as: Amazon Web Services (AWS) Microsoft Azure RedHat OpenShift Local testing of Docker containerization may be done on a desktop, however a contianer running on cloud implementation is the natural endpoint for a container deployment. Additional infrastructure components may be implemented for test or prototyping utilizing a cloud service. The choice of provider and implementation of a cloud service is entirely the responsibility of the implementer of the code. Code artifacts included here which implement cloud services are examples for research and educational purposes only. Python Programming Methodologies, Standards, and Tools: Some standards: PEP20 PEP8 Tools to implement the standards Flake8 Pylint Pytest docstrings Development methodologies Domain Driven Design Test Driven Development Agile principle Books There's no shortage of reference materials in print and on the Internet about Python development. The list below contains some of the titles the developers consider the most helpful and authoritative regardless of level of expertise with Python. (Titles and author only, no affiliate links.) The Hitchhiker's Guide to Python Serious Python Domain Driven Design Distilled Domain Driven Design: Tackling Complexity in the Heart of Software Test Driven Development with Python Architecture Patterns with Python Pro Git No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"3. Tools and Resources"},{"location":"tools_and_resources/#getting-started","text":"The goal is to create, test, deploy, and maintain code to the highest professional standards. To do that we need to agree on a set of tools and practices to enable repeatable and reproducible code.","title":"Getting started"},{"location":"tools_and_resources/#cheat-sheet","text":"The Basics The Details Programming Language Python 3.6 or above. Computer Supports runnng Python 3.6 or above. OS Mac, Windows, or Windows w/WSL2. Documents and resources. GitHub and BPC-Technical-Workgroup-Folder - Google Drive","title":"Cheat Sheet"},{"location":"tools_and_resources/#programming-languages","text":"The initial development of the project is being done in Python. Additional development in Go and adoption and implementation of cloud methodologies utilizing Amazon Web Services are considered stretch goals within the scope of the Project. All effort will be made to remain within the Python Standard Library . Inclusion of other well known packages with an open source license is acceptable if necessary.","title":"Programming Languages"},{"location":"tools_and_resources/#version-of-python","text":"Select a minimum version of Python 3.6. This will include newer features such as f-string.","title":"Version of Python"},{"location":"tools_and_resources/#computer-spec","text":"You will need a computer which is able to download and run Python 3.6.","title":"Computer Spec"},{"location":"tools_and_resources/#operating-system","text":"Mac Windows Windows w/WSL2 Linux","title":"Operating System"},{"location":"tools_and_resources/#additional-configuration-and-environment-considerations","text":"Consideration and implementation of additional Python enabling technology includes:","title":"Additional Configuration and Environment Considerations"},{"location":"tools_and_resources/#frameworks","text":"Django Flask FastAPI OpenAPI AWS Lambdas","title":"Frameworks:"},{"location":"tools_and_resources/#containerization-and-cloud-services","text":"Docker Running on a cloud service such as: Amazon Web Services (AWS) Microsoft Azure RedHat OpenShift Local testing of Docker containerization may be done on a desktop, however a contianer running on cloud implementation is the natural endpoint for a container deployment. Additional infrastructure components may be implemented for test or prototyping utilizing a cloud service. The choice of provider and implementation of a cloud service is entirely the responsibility of the implementer of the code. Code artifacts included here which implement cloud services are examples for research and educational purposes only.","title":"Containerization and Cloud Services:"},{"location":"tools_and_resources/#python-programming-methodologies-standards-and-tools","text":"Some standards: PEP20 PEP8 Tools to implement the standards Flake8 Pylint Pytest docstrings Development methodologies Domain Driven Design Test Driven Development Agile principle","title":"Python Programming Methodologies, Standards, and Tools:"},{"location":"tools_and_resources/#books","text":"There's no shortage of reference materials in print and on the Internet about Python development. The list below contains some of the titles the developers consider the most helpful and authoritative regardless of level of expertise with Python. (Titles and author only, no affiliate links.) The Hitchhiker's Guide to Python Serious Python Domain Driven Design Distilled Domain Driven Design: Tackling Complexity in the Heart of Software Test Driven Development with Python Architecture Patterns with Python Pro Git","title":"Books"},{"location":"urn/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"urn.py"},{"location":"urn_handler/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"urn_handler.py"},{"location":"urn_hasher/","text":"No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"urn_hasher.py"},{"location":"using_the_modules/","text":"Integrating Code Modules The Package Structure and Using the Modules Getting the code to do something. in progress No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"7a. The Modules"},{"location":"using_the_modules/#integrating-code-modules","text":"","title":"Integrating Code Modules"},{"location":"using_the_modules/#the-package-structure-and-using-the-modules","text":"Getting the code to do something. in progress","title":"The Package Structure and Using the Modules"},{"location":"working_with_the_code/","text":"Install Python. Use a minimum of Python 3.6. Recommended Python 3.10. Create a Python viritual environment. The benefits of creating and running the code in a Python virtual software development environment can't be overstated. Use the Python virtualization tool of your choice. Developers on the project have used conda, venv, virtualenv and pipenv. Create your virtual environment: Use pip for module and package management Update pip in your non-virtual python installation: python -m pip install --upgrade pip (If you are using a Mac or a system where the Python 3 install is not directly alias'ed or on path, substitute whatever is needed to call Python.) Execute \"pip list\" to see what's installed in the base Python installation. pip list There shouldn't be more than two or three packages. Run the command to create your virtual environment. In this case the virtualization is created using venv . python -m venv .discovery Source the script file to activate the virtual environment source ./.discovery/bin/activate This will place the virtual environment name at the beginning of the console prompt. From here you are running in the virtual environment. Any modifications made to the environment should be isolated to your virtual Python instance. You can work on code located anywhere on your filesystem after activating the virtual environment. When done working in the virtual environment, enter the following command to exit it. deactivate Get the code Viewers of this page are presumed to be able to access github. It is entirely possible to pull the code from github anonymously using a link from within the repo to do so. If you want to do more than anonymously pull code and contribute: Create a github account. install the github cli or the github desktop application Configure your personal profile and ssh keys to securely submit code to the repository. Pull the code from github. Look for the green \"Code\" button which will provide links to clone the code using https, ssh, the git desktop, or a zip file. This going to pull the repo at the root ./e-invoice-Onboarding-Toolkit. Open the folder as a project within your IDE or editor of choice. No Representations or Warranties THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"6. Working with the Code"},{"location":"working_with_the_code/#create-a-python-viritual-environment","text":"The benefits of creating and running the code in a Python virtual software development environment can't be overstated. Use the Python virtualization tool of your choice. Developers on the project have used conda, venv, virtualenv and pipenv. Create your virtual environment: Use pip for module and package management Update pip in your non-virtual python installation: python -m pip install --upgrade pip (If you are using a Mac or a system where the Python 3 install is not directly alias'ed or on path, substitute whatever is needed to call Python.) Execute \"pip list\" to see what's installed in the base Python installation. pip list There shouldn't be more than two or three packages. Run the command to create your virtual environment. In this case the virtualization is created using venv . python -m venv .discovery Source the script file to activate the virtual environment source ./.discovery/bin/activate This will place the virtual environment name at the beginning of the console prompt. From here you are running in the virtual environment. Any modifications made to the environment should be isolated to your virtual Python instance. You can work on code located anywhere on your filesystem after activating the virtual environment. When done working in the virtual environment, enter the following command to exit it. deactivate","title":"Create a Python viritual environment."},{"location":"working_with_the_code/#get-the-code","text":"Viewers of this page are presumed to be able to access github. It is entirely possible to pull the code from github anonymously using a link from within the repo to do so. If you want to do more than anonymously pull code and contribute: Create a github account. install the github cli or the github desktop application Configure your personal profile and ssh keys to securely submit code to the repository. Pull the code from github. Look for the green \"Code\" button which will provide links to clone the code using https, ssh, the git desktop, or a zip file. This going to pull the repo at the root ./e-invoice-Onboarding-Toolkit. Open the folder as a project within your IDE or editor of choice.","title":"Get the code"}]}